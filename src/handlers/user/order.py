from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from services.database import get_database_session, Order, OrderItem, CartItem
import datetime
from utils.message_utils import safe_delete_message
from utils.logger import setup_logger
from services.product_service import get_product_by_id
from services.inventory_service import decrease_stock

# Setup logger
logger = setup_logger('handlers.order')

class OrderStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    waiting_for_shipping_address = State()

async def checkout_callback(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    await callback.answer()
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await safe_delete_message(callback.message)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–æ—Ä–∑–∏–Ω–µ", callback_data="view_cart"))
    
    await callback.message.answer(
        "üì¶ <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:",
        parse_mode="HTML",
        reply_markup=keyboard
    )
    
    await OrderStates.waiting_for_shipping_address.set()

async def process_shipping_address(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –æ—Ñ–æ—Ä–º–ª—è–µ—Ç –∑–∞–∫–∞–∑"""
    user_id = message.from_user.id
    shipping_address = message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(shipping_address=shipping_address)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    status_message = await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à –∑–∞–∫–∞–∑...")
    
    try:
        session = get_database_session()
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
            cart_items = session.query(CartItem).filter(CartItem.user_id == user_id).all()
            
            if not cart_items:
                await status_message.edit_text(
                    "‚ùå –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑.",
                    reply_markup=types.InlineKeyboardMarkup().add(
                        types.InlineKeyboardButton("üõçÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω", callback_data="back_to_categories")
                    )
                )
                await state.finish()
                return
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
            new_order = Order(
                user_id=user_id,
                total_amount=0,  # –ü–æ–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏–º 0, –ø–æ—Ç–æ–º –æ–±–Ω–æ–≤–∏–º
                shipping_address=shipping_address,
                status="pending",
                created_at=datetime.datetime.now(),
                updated_at=datetime.datetime.now()
            )
            session.add(new_order)
            session.flush()  # –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID –∑–∞–∫–∞–∑–∞
            
            # –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –≤ –∑–∞–∫–∞–∑ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
            total_amount = 0
            order_items = []
            inventory_updates = []
            
            for item in cart_items:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
                product = get_product_by_id(item.product_id)
                
                if product and product.get('stock', 0) >= item.quantity:
                    price = product.get('price', 0)
                    
                    # –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –∑–∞–∫–∞–∑–∞
                    order_item = OrderItem(
                        order_id=new_order.id,
                        product_id=item.product_id,
                        quantity=item.quantity,
                        price=price
                    )
                    session.add(order_item)
                    order_items.append({
                        'name': product.get('name', f'–¢–æ–≤–∞—Ä #{item.product_id}'),
                        'quantity': item.quantity,
                        'price': price,
                        'total': price * item.quantity
                    })
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É
                    total_amount += price * item.quantity
                    
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    current_stock = product.get('stock', 0)
                    inventory_updates.append({
                        'product_id': item.product_id,
                        'quantity_to_subtract': item.quantity  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –≤—ã—á–∏—Ç–∞–Ω–∏—è
                    })
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞
            new_order.total_amount = total_amount
            
            # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
            session.query(CartItem).filter(CartItem.user_id == user_id).delete()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î
            session.commit()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ
            order_message = (
                f"üìù <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>\n\n"
                f"üìã <b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> #{new_order.id}\n"
                f"üè† <b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {shipping_address}\n\n"
                f"<b>–¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ:</b>\n"
            )
            
            for item in order_items:
                order_message += (
                    f"‚Ä¢ {item['name']} - {item['quantity']} —à—Ç. √ó {item['price']} ‚≠êÔ∏è = {item['total']} ‚≠êÔ∏è\n"
                )
            
            order_message += f"\n<b>–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤:</b> {sum(item['quantity'] for item in order_items)}\n"
            order_message += f"<b>–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> {total_amount} ‚≠êÔ∏è"
            
            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–æ–≤ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–∞–≥–∞–∑–∏–Ω
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton("üõçÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω", callback_data="back_to_categories"))
            
            await status_message.edit_text(
                order_message,
                parse_mode="HTML",
                reply_markup=keyboard
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
            for update in inventory_updates:
                try:
                    product_id = update['product_id']
                    quantity = update['quantity_to_subtract']
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –∑–∞–ø–∞—Å–∞
                    decrease_stock(product_id, quantity)
                    
                except Exception as e:
                    logger.error(f"Error updating inventory for product {update['product_id']}: {e}", exc_info=True)
            
        except Exception as e:
            session.rollback()
            logger.error(f"Error creating order: {e}", exc_info=True)
            await status_message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–æ—Ä–∑–∏–Ω–µ", callback_data="view_cart")
                )
            )
        finally:
            session.close()
    
    except Exception as e:
        logger.error(f"Error processing order: {e}", exc_info=True)
        await status_message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–æ—Ä–∑–∏–Ω–µ", callback_data="view_cart")
            )
        )
    
    await state.finish()

def register_order_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤"""
    dp.register_callback_query_handler(checkout_callback, lambda c: c.data == "checkout", state="*")
    dp.register_message_handler(process_shipping_address, state=OrderStates.waiting_for_shipping_address)