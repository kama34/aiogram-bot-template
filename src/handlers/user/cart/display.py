from aiogram import types
from services.database import get_database_session, CartItem
from services.product_service import get_product_by_id
from utils.logger import setup_logger
from utils.message_utils import safe_delete_message

# Setup logger
logger = setup_logger('handlers.user.cart.display')

async def cart_command(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await show_cart(message, message.from_user.id)

async def view_cart(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã"""
    await callback.answer()
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await safe_delete_message(callback.message)
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
    await show_cart(callback.message, callback.from_user.id)

async def show_cart(message, user_id):
    """–û–±—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã"""
    try:
        session = get_database_session()
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cart_items = session.query(CartItem).filter(
                CartItem.user_id == user_id
            ).all()
            
            if not cart_items:
                # –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞
                cart_kb = types.InlineKeyboardMarkup(row_width=1)
                cart_kb.add(
                    types.InlineKeyboardButton("üõçÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–æ–≤–∞—Ä–∞–º", callback_data="back_to_categories")
                )
                
                await message.answer(
                    "üß∫ <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞</b>\n\n"
                    "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –Ω–∞—à–µ–º –º–µ–Ω—é!",
                    parse_mode="HTML",
                    reply_markup=cart_kb
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ
            cart_text = "üß∫ <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞</b>\n\n"
            total_items = 0
            total_cost = 0
            
            valid_items = []  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
            unavailable_products = []  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
            
            for item in cart_items:
                # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ ID —Ç–æ–≤–∞—Ä–∞ —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
                product_id = item.product_id
                if isinstance(product_id, str) and product_id.isdigit():
                    product_id = int(product_id)
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                product = get_product_by_id(product_id)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–æ–≤–∞—Ä –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –æ–Ω
                if not product or not product.get('active', True):
                    unavailable_products.append(item)
                    continue
                
                available_stock = product.get('stock', 0)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–∞ —Å–∫–ª–∞–¥–µ
                if available_stock <= 0:
                    unavailable_products.append(item)
                    continue
                
                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –µ—Å–ª–∏ –æ–Ω–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–µ
                actual_quantity = min(item.quantity, available_stock)
                if actual_quantity != item.quantity:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –ë–î
                    item.quantity = actual_quantity
                    session.commit()
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                product_name = product['name']
                price = product['price']
                item_cost = price * actual_quantity
                total_items += actual_quantity
                total_cost += item_cost
                cart_text += f"‚Ä¢ {product_name} - {actual_quantity} —à—Ç. √ó {price} ‚≠ê = {item_cost} ‚≠ê\n"
                
                valid_items.append(item)
                    
            # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã, —É–¥–∞–ª—è–µ–º –∏—Ö –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
            for item in unavailable_products:
                session.delete(item)
            
            if unavailable_products:
                session.commit()
            
            # –ï—Å–ª–∏ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å—Ç–∞–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
            if not valid_items:
                cart_kb = types.InlineKeyboardMarkup(row_width=1)
                cart_kb.add(
                    types.InlineKeyboardButton("üõçÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–æ–≤–∞—Ä–∞–º", callback_data="back_to_categories")
                )
                
                await message.answer(
                    "üß∫ <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞</b>\n\n"
                    "–¢–æ–≤–∞—Ä—ã –≤ –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–∏–µ —Ç–æ–≤–∞—Ä—ã.",
                    parse_mode="HTML",
                    reply_markup=cart_kb
                )
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Ç–æ–≥–∞—Ö
            cart_text += f"\n<b>–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤:</b> {total_items}\n"
            cart_text += f"<b>–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> {total_cost} ‚≠ê"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω–æ–π
            from .keyboards import create_cart_keyboard
            cart_kb = create_cart_keyboard(valid_items)
            
            await message.answer(cart_text, parse_mode="HTML", reply_markup=cart_kb)
        finally:
            session.close()
            
    except Exception as e:
        logger.error(f"Error displaying cart for user {user_id}: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ—Ä–∑–∏–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")