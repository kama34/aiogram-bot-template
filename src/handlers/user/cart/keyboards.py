from aiogram import types
from services.product_service import get_product_by_id
from utils.logger import setup_logger

# Setup logger
logger = setup_logger('handlers.user.cart.keyboards')

def get_after_add_keyboard(product_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        types.InlineKeyboardButton("üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data="view_cart"),
        types.InlineKeyboardButton("üîç –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏", callback_data="back_to_categories"),
        types.InlineKeyboardButton("üì¶ –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä", callback_data=f"product_{product_id}")
    )
    return keyboard

def create_cart_keyboard(valid_items):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    cart_kb = types.InlineKeyboardMarkup(row_width=3)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    for item in valid_items:
        try:
            product_id = item.product_id
            if isinstance(product_id, str) and product_id.isdigit():
                product_id = int(product_id)
            
            product = get_product_by_id(product_id)
            product_name = product['name'] if product else f"–¢–æ–≤–∞—Ä {item.product_id}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–≤–∞—Ä–∞
            cart_kb.row(
                types.InlineKeyboardButton(
                    f"‚ûñ", 
                    callback_data=f"remove_one_{product_id}"
                ),
                types.InlineKeyboardButton(
                    f"{product_name} ({item.quantity})",
                    callback_data=f"product_{product_id}"
                ),
                types.InlineKeyboardButton(
                    f"‚ûï", 
                    callback_data=f"add_one_{product_id}"
                )
            )
            cart_kb.row(
                types.InlineKeyboardButton(
                    f"‚ùå –£–¥–∞–ª–∏—Ç—å {product_name}", 
                    callback_data=f"remove_all_{product_id}"
                )
            )
        except Exception as e:
            logger.error(f"Error creating button for cart item: {e}", exc_info=True)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω–æ–π
    cart_kb.row(types.InlineKeyboardButton("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout"))
    cart_kb.row(types.InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart"))
    cart_kb.row(types.InlineKeyboardButton("üõçÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏", callback_data="back_to_categories"))
    
    return cart_kb