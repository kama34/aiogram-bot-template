from aiogram import types
from services.order_service import OrderService
import traceback

async def view_my_orders(query_or_message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –µ–≥–æ –∑–∞–∫–∞–∑–æ–≤"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤—Ö–æ–¥—è—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞
    if isinstance(query_or_message, types.CallbackQuery):
        # –≠—Ç–æ callback (–Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ inline –∫–Ω–æ–ø–∫—É)
        user_id = query_or_message.from_user.id
        message = query_or_message.message
        
        # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º callback
        try:
            await query_or_message.answer()
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback: {e}")
            
        # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        try:
            await message.delete()
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    else:
        # –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ reply –∫–Ω–æ–ø–∫—É)
        user_id = query_or_message.from_user.id
        message = query_or_message
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –∑–∞–∫–∞–∑–æ–≤
    order_service = OrderService()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫–∞–∑–æ–≤
        stats = order_service.get_order_stats(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
        orders = order_service.get_user_orders(user_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        if stats["total_orders"] > 0:
            message_text = (
                f"üõçÔ∏è <b>–ú–æ–∏ –∑–∞–∫–∞–∑—ã</b>\n\n"
                f"–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: <b>{stats['total_orders']}</b>\n"
                f"–û–±—â–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫: <b>{stats['total_spent']*100:.2f} ‚≠ê</b>\n"
            )
            
            if stats["first_date"] and stats["last_date"]:
                message_text += (
                    f"–ü–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑: {stats['first_date'].strftime('%d.%m.%Y')}\n"
                    f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑: {stats['last_date'].strftime('%d.%m.%Y')}\n\n"
                )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
            message_text += "<b>–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤:</b>\n\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            
            for order in orders:
                order_date = order.created_at.strftime("%d.%m.%Y %H:%M") if hasattr(order, "created_at") else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                status_emojis = {
                    "new": "üÜï",
                    "paid": "üí∞",
                    "processing": "‚öôÔ∏è",
                    "shipped": "üöö",
                    "delivered": "‚úÖ",
                    "cancelled": "‚ùå"
                }
                status = getattr(order, "status", "new")
                status_emoji = status_emojis.get(status, "‚ùì")
                
                message_text += f"{status_emoji} <b>–ó–∞–∫–∞–∑ #{order.id}</b> –æ—Ç {order_date} - <b>{order.total_amount*100:.2f} ‚≠ê</b>\n"
                
                # –ö–Ω–æ–ø–∫–∞ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
                keyboard.add(types.InlineKeyboardButton(
                    f"üìã –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ #{order.id} –æ—Ç {order_date}", 
                    callback_data=f"my_order_detail_{order.id}"
                ))
        else:
            message_text = (
                f"üõçÔ∏è <b>–ú–æ–∏ –∑–∞–∫–∞–∑—ã</b>\n\n"
                f"–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.\n"
                f"–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–∞–≥–∞–∑–∏–Ω."
            )
            keyboard = types.InlineKeyboardMarkup()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        keyboard.add(types.InlineKeyboardButton(
            "‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", 
            callback_data="back_to_menu"
        ))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        await message.answer(message_text, parse_mode="HTML", reply_markup=keyboard)
        
    except Exception as e:
        error_text = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤: {str(e)}\n\n"
        error_text += traceback.format_exc()
        print(error_text)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(
            "‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", 
            callback_data="back_to_menu"
        ))
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", 
            reply_markup=keyboard
        )
    finally:
        order_service.close_session()
from aiogram import types, Dispatcher
from .detail import view_my_order_detail
        
def register_user_orders_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –∑–∞–∫–∞–∑—ã" –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
    dp.register_message_handler(
        view_my_orders,
        lambda message: message.text == "üõçÔ∏è –ú–æ–∏ –∑–∞–∫–∞–∑—ã",
        state="*"
    )
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ —Å–≤–æ–∏—Ö –∑–∞–∫–∞–∑–æ–≤ —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫—É
    dp.register_callback_query_handler(
        view_my_orders,
        lambda c: c.data == "my_orders",
        state="*"
    )
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
    dp.register_callback_query_handler(
        view_my_order_detail,
        lambda c: c.data and c.data.startswith("my_order_detail_"),
        state="*"
    )