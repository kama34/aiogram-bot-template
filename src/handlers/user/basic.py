from aiogram import types
from services.database import get_database_session, User
from keyboards.user_kb import user_kb
from keyboards.admin_kb import admin_reply_kb
from utils.admin_utils import is_admin
from utils.logger import setup_logger

# Setup logger for this module
logger = setup_logger('handlers.basic')

async def start_command(message: types.Message):
    """Handler for /start command"""
    user_id = message.from_user.id
    username = message.from_user.username or "unknown"
    full_name = message.from_user.full_name or "Unknown User"
    
    # Check for referral parameter
    referrer_id = None
    args = message.get_args()
    
    if args and args.startswith("ref_"):
        try:
            referrer_id = int(args.replace("ref_", ""))
        except (ValueError, TypeError) as e:
            logger.error(f"Error parsing referrer ID: {e}", exc_info=True)
            referrer_id = None
    
    try:
        from services.user_service import UserService
        from handlers.user.referral import process_referral
        
        with UserService() as user_service:
            # Check if user already exists
            existing_user = user_service.get_user_by_id(user_id)
            is_new_user = not existing_user
            
            # Register new user if needed
            if is_new_user:
                try:
                    new_user = User(
                        id=user_id,
                        username=username,
                        full_name=full_name
                    )
                    user_service.session.add(new_user)
                    user_service.session.commit()
                    logger.info(f"New user registered: {user_id} ({username})")
                    
                    # Process referral for new users
                    if referrer_id and referrer_id != user_id:
                        await process_referral(user_service, user_id, referrer_id, full_name, username)
                except Exception as e:
                    logger.error(f"Error registering user: {e}", exc_info=True)
                    user_service.session.rollback()
            else:
                # Process referral even for existing users who haven't been referred before
                if referrer_id and referrer_id != user_id:
                    # Check if this user already has a referrer
                    existing_referral = user_service.get_referral_by_user_id(user_id)
                    if not existing_referral:
                        await process_referral(user_service, user_id, referrer_id, full_name, username)
            
            # Show normal welcome message with appropriate keyboard based on user type
            welcome_message = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞!" if not is_new_user else "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã."
            
            # Choose the appropriate keyboard based on whether the user is an admin
            keyboard = admin_reply_kb if is_admin(user_id) else user_kb
            
            await message.answer(welcome_message, reply_markup=keyboard)
            
    except Exception as e:
        logger.error(f"Error in start_command: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def help_command(message: types.Message):
    """Show help information"""
    help_text = (
        "‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/referral - –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É\n"
        "/myreferrals - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n\n"
        
        "<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:</b>\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <b>–ü—Ä–æ—Ñ–∏–ª—å</b> —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ\n"
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞</b> —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π\n"
        "‚Ä¢ –í —Ä–∞–∑–¥–µ–ª–µ <b>–ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã</b> –≤—ã —É–≤–∏–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö –≤–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
        
        "<b>–°–∏—Å—Ç–µ–º–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b>\n"
        "‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ\n"
        "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
        
        "–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
    )
    
    await message.answer(help_text, parse_mode="HTML")

async def profile_command(message: types.Message):
    """Show user profile information with improved error handling"""
    user_id = message.from_user.id
    
    try:
        from services.user_service import UserService
        
        with UserService() as user_service:
            # Get user data from database
            user = user_service.get_user_by_id(user_id)
            
            if not user:
                logger.warning(f"User profile not found for ID: {user_id}")
                await message.answer("–û—à–∏–±–∫–∞: –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
                return
            
            # Get referral counts
            try:
                referral_count = user_service.count_user_referrals(user_id)
            except Exception as e:
                logger.error(f"Error getting referral count for user {user_id}: {e}", exc_info=True)
                referral_count = 0
            
            # Get referrer info if available
            referrer = None
            try:
                referral_info = user_service.get_referral_by_user_id(user_id)
                if referral_info and referral_info.referred_by:
                    referrer = user_service.get_user_by_id(referral_info.referred_by)
            except Exception as e:
                logger.error(f"Error getting referrer for user {user_id}: {e}", exc_info=True)
            
            # Format registration date safely
            try:
                registered_date = user.created_at.strftime("%d.%m.%Y %H:%M") if hasattr(user, "created_at") and user.created_at else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            except (AttributeError, ValueError) as e:
                logger.warning(f"Error formatting date for user {user_id}: {e}")
                registered_date = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            # Build profile text
            profile_text = (
                f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
                f"üÜî ID: <code>{user.id}</code>\n"
                f"üë§ –ò–º—è: {user.full_name}\n"
                f"üîñ Username: @{user.username}\n"
                f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registered_date}\n\n"
                f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{referral_count}</b>\n"
            )
            
            # Add referrer info if available
            if referrer:
                profile_text += f"üë®‚Äçüë¶ –í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª: {referrer.full_name} (@{referrer.username})\n"
            
            # Create keyboard with referral link button
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton("üîó –ú–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", callback_data="get_ref_link"))
            
            logger.info(f"Successfully generated profile for user {user_id}")
            await message.answer(profile_text, parse_mode="HTML", reply_markup=keyboard)
            
    except Exception as e:
        logger.error(f"Unexpected error in profile_command for user {user_id}: {e}", exc_info=True)
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")
            )
        )

async def text_handler(message: types.Message):
    """Handle text messages for keyboard buttons"""
    text = message.text
    
    # Always allow help regardless of user status
    if text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        await help_command(message)
        return
    
    # For all other commands, check if user is blocked
    with get_database_session() as session:
        user = session.query(User).filter(User.id == message.from_user.id).first()
        if user and hasattr(user, 'is_blocked') and user.is_blocked:
            await message.answer("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '‚ÑπÔ∏è –ü–æ–º–æ—â—å' –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏.")
            return
    
    # Process other commands for non-blocked users
    if text == "üîç –ü—Ä–æ—Ñ–∏–ª—å":
        await profile_command(message)
    elif text == "üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞":
        from handlers.user.referral import referral_command
        await referral_command(message)
    elif text == "üë• –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã":
        from handlers.user.referral import my_referrals_command
        await my_referrals_command(message)
    elif text == "üõí –ú–µ–Ω—é":
        from handlers.user.shop import menu_command
        await menu_command(message)
    elif text == "üß∫ –ö–æ—Ä–∑–∏–Ω–∞":
        from handlers.user.cart import cart_command
        await cart_command(message)
    elif text == "üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞" and is_admin(message.from_user.id):
        from handlers.admin.core import admin_panel
        await admin_panel(message)

def register_basic_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    from aiogram import Dispatcher
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    dp.register_message_handler(start_command, commands=["start"])
    dp.register_message_handler(help_command, commands=["help"])
    dp.register_message_handler(profile_command, commands=["profile"])
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    dp.register_message_handler(text_handler, 
                              lambda message: message.text in [
                                  "‚ÑπÔ∏è –ü–æ–º–æ—â—å", 
                                  "üîç –ü—Ä–æ—Ñ–∏–ª—å", 
                                  "üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", 
                                  "üë• –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã",
                                  "üõí –ú–∞–≥–∞–∑–∏–Ω",
                                  "üß∫ –ö–æ—Ä–∑–∏–Ω–∞",
                                  "üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
                              ])