from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from services.product_service import get_product_by_id
from services.database import get_database_session, CartItem
from utils.message_utils import safe_delete_message
from utils.logger import setup_logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = setup_logger('handlers.shop.quantity_selection')

async def select_quantity(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞
    product_id = int(callback.data.replace("select_quantity_", ""))
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await safe_delete_message(callback.message)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
    product = get_product_by_id(product_id)
    
    if not product:
        await callback.message.answer(
            "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω.",
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton("‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤", callback_data="back_to_categories")
            )
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ
    available_stock = product.get('stock', 0)
    if available_stock <= 0:
        await callback.message.answer(
            "‚ùå –î–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ.",
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton("‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤", callback_data="back_to_categories")
            )
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(selecting_product_id=product_id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    qty_keyboard = types.InlineKeyboardMarkup(row_width=5)
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ (–Ω–µ –±–æ–ª–µ–µ 10 –∏–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞)
    max_qty = min(10, available_stock)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º–∏
    qty_buttons = []
    for i in range(1, max_qty + 1):
        qty_buttons.append(
            types.InlineKeyboardButton(
                str(i), 
                callback_data=f"add_to_cart_{product_id}_{i}"
            )
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥—Ä—É–ø–ø–∞–º–∏ –ø–æ 5
    for i in range(0, len(qty_buttons), 5):
        qty_keyboard.row(*qty_buttons[i:i+5])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    qty_keyboard.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"product_{product_id}"))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    await callback.message.answer(
        f"<b>{product['name']}</b>\n\n"
        f"üí∞ –¶–µ–Ω–∞: {product['price']} ‚≠ê\n"
        f"üî¢ –î–æ—Å—Ç—É–ø–Ω–æ: {available_stock} —à—Ç.\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É:",
        reply_markup=qty_keyboard,
        parse_mode="HTML"
    )

async def add_to_cart(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º"""
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
    parts = callback.data.split("_")
    product_id = int(parts[2])
    quantity = int(parts[3])
    
    await callback.answer()
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await safe_delete_message(callback.message)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    product = get_product_by_id(product_id)
    
    if not product:
        await callback.message.answer(
            "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω.",
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton("‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤", callback_data="back_to_categories")
            )
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    available_stock = product.get('stock', 0)
    if quantity > available_stock:
        await callback.message.answer(
            f"‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –Ω–∞ —Å–∫–ª–∞–¥–µ –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ {available_stock} —à—Ç. —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞. "
            f"–í—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ({quantity}) –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.",
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"select_quantity_{product_id}")
            )
        )
        return
    
    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É
    user_id = callback.from_user.id
    
    try:
        session = get_database_session()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
        cart_item = session.query(CartItem).filter(
            CartItem.user_id == user_id,
            CartItem.product_id == str(product_id)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –≤ –ë–î —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ VARCHAR
        ).first()
        
        if cart_item:
            # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä —É–∂–µ –µ—Å—Ç—å, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            new_quantity = cart_item.quantity + quantity
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫
            if new_quantity > available_stock:
                await callback.message.answer(
                    f"‚ö†Ô∏è –í –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ —É–∂–µ –µ—Å—Ç—å {cart_item.quantity} —à—Ç. —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞. "
                    f"–ù–∞ —Å–∫–ª–∞–¥–µ –æ—Å—Ç–∞–ª–æ—Å—å {available_stock} —à—Ç. "
                    f"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ {quantity} —à—Ç.",
                    reply_markup=types.InlineKeyboardMarkup().add(
                        types.InlineKeyboardButton("üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data="view_cart"),
                        types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"product_{product_id}")
                    )
                )
                session.close()
                return
            
            cart_item.quantity = new_quantity
        else:
            # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            cart_item = CartItem(
                user_id=user_id,
                product_id=str(product_id),  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –≤ –ë–î —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ VARCHAR
                quantity=quantity
            )
            session.add(cart_item)
        
        session.commit()
        session.close()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            types.InlineKeyboardButton("üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data="view_cart"),
            types.InlineKeyboardButton("üîç –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏", callback_data="back_to_categories"),
            types.InlineKeyboardButton("üì¶ –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä", callback_data=f"product_{product_id}")
        )
        
        await callback.message.answer(
            f"‚úÖ {product['name']} ({quantity} —à—Ç.) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!",
            reply_markup=keyboard
        )
    
    except Exception as e:
        logger.error(f"Error adding product to cart: {e}", exc_info=True)
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É.",
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"product_{product_id}")
            )
        )

def register_quantity_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    dp.register_callback_query_handler(
        select_quantity, 
        lambda c: c.data and c.data.startswith("select_quantity_"),
        state="*"
    )
    
    dp.register_callback_query_handler(
        add_to_cart, 
        lambda c: c.data and c.data.startswith("add_to_cart_"),
        state="*"
    )