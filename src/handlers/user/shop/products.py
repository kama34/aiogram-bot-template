from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from services.product_service import get_active_products
from utils.message_utils import safe_delete_message
from utils.logger import setup_logger

# Setup logger
logger = setup_logger('handlers.shop.products')

async def show_products(message: types.Message, category=None, page=0):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–æ–≤ (–∏–ª–∏ None –¥–ª—è –≤—Å–µ—Ö)
        page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å 0)
    """
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    products_per_page = 8
    offset = page * products_per_page
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    products = get_active_products(
        category=category, 
        limit=products_per_page, 
        offset=offset
    )
    
    # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤
    if not products:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("‚óÄÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_categories"))
        
        await message.answer(
            "üòî <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n"
            "–í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –∏–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ.",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    products_kb = types.InlineKeyboardMarkup(row_width=2)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    product_buttons = []
    for product in products:
        product_buttons.append(types.InlineKeyboardButton(
            f"{product['name']} - {product['price']} ‚≠ê", 
            callback_data=f"product_{product['id']}"
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å–µ—Ç–∫—É –ø–æ 2 –≤ —Ä—è–¥
    for i in range(0, len(product_buttons), 2):
        if i + 1 < len(product_buttons):
            products_kb.row(product_buttons[i], product_buttons[i+1])
        else:
            products_kb.add(product_buttons[i])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é, –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –º–Ω–æ–≥–æ
    # –ó–¥–µ—Å—å –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ –±–æ–ª—å—à–µ —Ç–æ–≤–∞—Ä–æ–≤
    check_more = get_active_products(
        category=category, 
        limit=1, 
        offset=offset + products_per_page
    )
    
    navigation_buttons = []
    
    if page > 0:
        category_param = f"_{category}" if category else ""
        navigation_buttons.append(
            types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"shop_page_{page-1}{category_param}")
        )
    
    if check_more:
        category_param = f"_{category}" if category else ""
        navigation_buttons.append(
            types.InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"shop_page_{page+1}{category_param}")
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if navigation_buttons:
        products_kb.row(*navigation_buttons)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    products_kb.add(types.InlineKeyboardButton("‚óÄÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_categories"))
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫–æ—Ä–∑–∏–Ω—ã
    products_kb.add(types.InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="view_cart"))
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    category_title = f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}" if category else "üõçÔ∏è –í—Å–µ —Ç–æ–≤–∞—Ä—ã"
    
    await message.answer(
        f"{category_title}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
        reply_markup=products_kb
    )

async def pagination_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏ –≤–æ–∑–º–æ–∂–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    data_parts = callback.data.replace("shop_page_", "").split("_")
    page = int(data_parts[0])
    category = data_parts[1] if len(data_parts) > 1 else None
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await safe_delete_message(callback.message)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await show_products(callback.message, category=category, page=page)

async def back_to_categories_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    await callback.answer()
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await safe_delete_message(callback.message)
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
    from .categories import show_categories
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await show_categories(callback.message)

def register_products_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤"""
    dp.register_callback_query_handler(
        pagination_callback, 
        lambda c: c.data and c.data.startswith("shop_page_"),
        state="*"
    )
    
    dp.register_callback_query_handler(
        back_to_categories_callback, 
        lambda c: c.data == "back_to_categories",
        state="*"
    )