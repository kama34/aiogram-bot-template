from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from services.product_service import get_product_by_id
from utils.message_utils import safe_delete_message
from utils.logger import setup_logger

# Setup logger
logger = setup_logger('handlers.shop.product_detail')

async def show_product_detail(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞
    product_id = int(callback.data.replace("product_", ""))
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await safe_delete_message(callback.message)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ
    product = get_product_by_id(product_id)
    
    if not product:
        # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤", callback_data="back_to_categories"))
        
        await callback.message.answer(
            "‚ùå <b>–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω.",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
    product_kb = types.InlineKeyboardMarkup(row_width=2)
    
    # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
    if product.get('stock', 0) > 0:
        product_kb.add(
            types.InlineKeyboardButton(
                "üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", 
                callback_data=f"select_quantity_{product_id}"
            )
        )
    else:
        product_kb.add(
            types.InlineKeyboardButton(
                "‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏", 
                callback_data="product_not_available"
            )
        )
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    product_kb.row(
        types.InlineKeyboardButton("‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤", callback_data="back_to_products"),
        types.InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="view_cart")
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–µ
    product_text = (
        f"<b>{product['name']}</b>\n\n"
        f"{product['description']}\n\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {product['price']} ‚≠ê\n"
        f"üî¢ <b>–í –Ω–∞–ª–∏—á–∏–∏:</b> {product.get('stock', 0)} —à—Ç.\n"
    )
    
    if product.get('category'):
        product_text += f"üìÅ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {product['category']}\n"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–µ
    if product.get('image_url'):
        # –° –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        await callback.message.answer_photo(
            photo=product['image_url'],
            caption=product_text,
            reply_markup=product_kb,
            parse_mode="HTML"
        )
    else:
        # –ë–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        await callback.message.answer(
            product_text,
            reply_markup=product_kb,
            parse_mode="HTML"
        )

async def back_to_products_callback(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤"""
    await callback.answer()
    
    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await safe_delete_message(callback.message)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–ø–æ—Ä—Ç –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
    from .products import show_products
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤
    await show_products(callback.message)

async def product_not_available_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ '–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏'"""
    await callback.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ", show_alert=True)

async def select_quantity_callback(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞"""
    product_id = callback.data.replace("select_quantity_", "")
    await callback.answer()
    
    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await safe_delete_message(callback.message)
    except Exception as e:
        logger.error(f"Error deleting message: {e}", exc_info=True)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
    try:
        product = get_product_by_id(int(product_id))
        product_name = product['name'] if product else f"–¢–æ–≤–∞—Ä {product_id}"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        quantity_kb = types.InlineKeyboardMarkup(row_width=5)
        quantity_buttons = []
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º –Ω–∞ —Å–∫–ª–∞–¥–µ
        max_quantity = min(5, product['stock'])
        
        for i in range(1, max_quantity + 1):  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç 1 –¥–æ max_quantity
            quantity_buttons.append(
                types.InlineKeyboardButton(str(i), callback_data=f"add_qty_{product_id}_{i}")
            )
        
        quantity_kb.add(*quantity_buttons)
        quantity_kb.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"product_{product_id}"))
        
        await callback.message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ \"{product_name}\":", reply_markup=quantity_kb)
    except Exception as e:
        logger.error(f"Error showing quantity selection: {e}", exc_info=True)
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞.",
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton("‚óÄÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_categories")
            )
        )

def register_product_detail_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ"""
    dp.register_callback_query_handler(
        show_product_detail, 
        lambda c: c.data and c.data.startswith("product_") and not c.data == "product_not_available",
        state="*"
    )
    
    dp.register_callback_query_handler(
        back_to_products_callback, 
        lambda c: c.data == "back_to_products",
        state="*"
    )
    
    dp.register_callback_query_handler(
        product_not_available_callback, 
        lambda c: c.data == "product_not_available",
        state="*"
    )
    
    dp.register_callback_query_handler(
        select_quantity_callback, 
        lambda c: c.data and c.data.startswith("select_quantity_"),
        state="*"
    )