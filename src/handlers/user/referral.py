from aiogram import types
from services.database import Referral
from utils.logger import setup_logger
from utils.admin_utils import is_admin
from config import ADMIN_IDS

# Setup logger for this module
logger = setup_logger('handlers.referral')

# Get bot username for referral links
async def get_bot_username():
    """Get bot username for referral links with improved error handling"""
    try:
        from bot import bot
        bot_info = await bot.get_me()
        logger.info(f"Successfully retrieved bot username: {bot_info.username}")
        return bot_info.username
    except ImportError as e:
        logger.critical(f"Failed to import bot module: {e}", exc_info=True)
        return "botusername"  # Fallback name
    except Exception as e:
        logger.error(f"Failed to get bot username: {e}", exc_info=True)
        return "botusername"  # Fallback name

async def process_referral(user_service, user_id, referrer_id, full_name, username):
    """Process a referral and send notifications"""
    try:
        referrer = user_service.get_user_by_id(referrer_id)
        if not referrer:
            logger.warning(f"Referrer {referrer_id} not found when processing referral for user {user_id}")
            return
            
        # Create referral record with explicit commit
        try:
            new_referral = Referral(
                user_id=user_id,
                referred_by=referrer_id
            )
            user_service.session.add(new_referral)
            user_service.session.commit()
            logger.info(f"Referral created: user {user_id} referred by {referrer_id}")
            
            # Get bot instance for messaging
            from bot import bot
            
            # Send notification to the new user (invitee)
            try:
                await bot.send_message(
                    chat_id=user_id,
                    text=f"–í—ã –±—ã–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {referrer.full_name}!"
                )
            except Exception as e:
                logger.error(f"Failed to send notification to invitee {user_id}: {e}", exc_info=True)
            
            # Send notification to the referrer
            try:
                await bot.send_message(
                    chat_id=referrer_id, 
                    text=f"–ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –ø—Ä–∏—à—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {full_name} (@{username})"
                )
            except Exception as e:
                logger.error(f"Failed to send notification to referrer {referrer_id}: {e}", exc_info=True)
            
            # Notify admin about the referral
            for admin_id in ADMIN_IDS:
                try:
                    await bot.send_message(
                        chat_id=admin_id,
                        text=f"üîî –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!\n\n"
                            f"–ü—Ä–∏–≥–ª–∞—Å–∏–ª: {referrer.full_name} (@{referrer.username}, ID: {referrer.id})\n"
                            f"–ü—Ä–∏–≥–ª–∞—à—ë–Ω: {full_name} (@{username}, ID: {user_id})"
                    )
                except Exception as e:
                    logger.error(f"Failed to notify admin {admin_id}: {e}", exc_info=True)
                    
        except Exception as e:
            logger.error(f"Error creating referral record: {e}", exc_info=True)
            user_service.session.rollback()
    except Exception as e:
        logger.error(f"Error processing referral: {e}", exc_info=True)

async def referral_command(message: types.Message):
    """Generate a referral link for the user"""
    user_id = message.from_user.id
    
    # For admin users, redirect to the admin panel version
    if is_admin(user_id):
        # Create a "fake" message object that matches what admin_referral_link expects
        class AdminMessage:
            def __init__(self, chat_id):
                self.chat = types.Chat(id=chat_id, type="private")
                self.answer = message.answer
        
        admin_msg = AdminMessage(user_id)
        from handlers.admin import admin_referral_link
        await admin_referral_link(admin_msg)
        return
    
    # Regular user flow continues as before...
    bot_username = await get_bot_username()
    
    # Create a referral link with the user's ID
    # Make sure there's no space or other characters that could break the parameter
    referral_link = f"https://t.me/{bot_username}?start=ref_{user_id}"
    
    # Get how many users this user has referred
    from services.user_service import UserService
    with UserService() as user_service:
        referral_count = user_service.count_user_referrals(user_id)
    
    # Create share buttons with cleaner formatting
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    
    # Share button - make sure no extra spaces or characters
    keyboard.add(
        types.InlineKeyboardButton(
            "üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", 
            switch_inline_query=f"–ü—Ä–∏–≥–ª–∞—à–∞—é —Ç–µ–±—è –≤ –±–æ—Ç–∞! {referral_link}"
        )
    )
    
    await message.answer(
        f"üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n\n"
        f"<code>{referral_link}</code>\n\n"
        f"–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏! –í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏: <b>{referral_count}</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        parse_mode="HTML",
        reply_markup=keyboard
    )

async def my_referrals_command(message: types.Message):
    """Show the user's referrals"""
    user_id = message.from_user.id
    
    from services.user_service import UserService
    with UserService() as user_service:
        referrals = user_service.get_user_referrals(user_id)
        
        if not referrals:
            # Add a button to get referral link when no referrals found
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(
                types.InlineKeyboardButton("üîó –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É", callback_data=f"get_ref_link")
            )
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", reply_markup=keyboard)
            return
        
        # Count total referrals
        total_referrals = len(referrals)
        
        # Build referral list with more details
        referral_text = f"üë• <b>–í–∞—à–∏ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b> ({total_referrals}):\n\n"
        
        for i, ref in enumerate(referrals, 1):
            user = user_service.get_user_by_id(ref.user_id)
            if user:
                date_str = ref.created_at.strftime("%d.%m.%Y %H:%M") if hasattr(ref, 'created_at') else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                username_display = f"@{user.username}" if user.username else "–±–µ–∑ username"
                referral_text += f"{i}. <b>{user.full_name}</b> ({username_display})\n   üìÖ {date_str}\n"
        
        # Add statistics summary
        referral_text += f"\n<b>–í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ:</b> {total_referrals} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        
        # Create keyboard with useful actions
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            types.InlineKeyboardButton("üîó –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É", callback_data="get_ref_link")
        )
    
    await message.answer(referral_text, parse_mode="HTML", reply_markup=keyboard)

async def get_ref_link_callback(callback: types.CallbackQuery):
    """Handle the get referral link button"""
    try:
        await callback.answer()
    except Exception as e:
        logger.error(f"Error answering callback: {e}", exc_info=True)
    
    # Just call the existing referral command
    await referral_command(callback.message)

async def copy_ref_link_callback(callback: types.CallbackQuery):
    """Handle the copy referral link button with improved error handling"""
    user_id = None
    
    try:
        # –û—Ç–≤–µ—Ç –Ω–∞ callback –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ —Ä–∞–Ω—å—à–µ, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –æ–∂–∏–¥–∞–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await callback.answer("–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏–∂–µ")
    except Exception as e:
        logger.error(f"Error answering callback: {e}", exc_info=True)
    
    try:
        # Extract user ID from callback data with validation
        user_id_str = callback.data.replace("copy_ref_", "")
        
        # –°—Ç—Ä–æ–≥–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è input –¥–∞–Ω–Ω—ã—Ö
        if not user_id_str or not user_id_str.isdigit():
            logger.warning(f"Invalid user ID format in callback data: {callback.data}")
            await callback.message.answer(
                "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ.",
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton("üîÑ –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É", callback_data="get_ref_link")
                )
            )
            return
            
        user_id = int(user_id_str)  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ
        
        # Generate link
        bot_username = await get_bot_username()
        if not bot_username or bot_username == "botusername":
            logger.warning(f"Using fallback bot username for user {user_id}")
            
        referral_link = f"https://t.me/{bot_username}?start=ref_{user_id}"
        logger.info(f"Generated referral link for user {user_id}: {referral_link}")
        
        # Send as a separate message for easy copying
        await callback.message.answer(
            f"<code>{referral_link}</code>\n\n–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–∑—å—è–º",
            parse_mode="HTML"
        )
    except ValueError as e:
        # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤
        logger.error(f"Value error in copy_ref_link_callback: {e}", exc_info=True)
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏. –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö."
        )
    except Exception as e:
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        context = {
            "user_id": user_id,
            "callback_data": callback.data,
            "from_user": callback.from_user.id
        }
        logger.error(f"Error in copy_ref_link_callback: {e}. Context: {context}", exc_info=True)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="get_ref_link")
            )
        )

def register_referral_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    dp.register_message_handler(referral_command, commands=["referral"])
    dp.register_message_handler(my_referrals_command, commands=["myreferrals"])
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    dp.register_callback_query_handler(get_ref_link_callback, lambda c: c.data == "get_ref_link")
    dp.register_callback_query_handler(copy_ref_link_callback, lambda c: c.data and c.data.startswith("copy_ref_"))