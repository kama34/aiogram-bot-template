from aiogram import types, Dispatcher
from services.database import get_database_session, CartItem
from services.product_service import get_product_price, get_product_name, get_product_stock
from utils.logger import setup_logger

# Setup logger
logger = setup_logger('handlers.cart')

async def cart_command(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await show_cart(message, message.from_user.id)

async def view_cart_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ—Ä–∑–∏–Ω—ã"""
    await callback.answer()
    
    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.delete()
    except Exception as e:
        logger.error(f"Error deleting message: {e}", exc_info=True)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
    await show_cart(callback.message, callback.from_user.id)

async def show_cart(message, user_id):
    """–û–±—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã"""
    try:
        with get_database_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cart_items = session.query(CartItem).filter(
                CartItem.user_id == user_id
            ).all()
            
            if not cart_items:
                # –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞
                cart_kb = types.InlineKeyboardMarkup(row_width=1)
                cart_kb.add(
                    types.InlineKeyboardButton("üõí –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–æ–≤–∞—Ä–∞–º", callback_data="go_to_menu")
                )
                
                await message.answer(
                    "üß∫ <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞</b>\n\n"
                    "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –Ω–∞—à–µ–º –º–µ–Ω—é!",
                    parse_mode="HTML",
                    reply_markup=cart_kb
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ
            cart_text = "üß∫ <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞</b>\n\n"
            total_items = 0
            total_cost = 0
            
            for item in cart_items:
                product_name = get_product_name(item.product_id)
                price = get_product_price(item.product_id)
                item_cost = price * item.quantity
                total_items += item.quantity
                total_cost += item_cost
                cart_text += f"‚Ä¢ {product_name} - {item.quantity} —à—Ç. √ó {price} ‚≠ê = {item_cost} ‚≠ê\n"
            
            cart_text += f"\n<b>–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤:</b> {total_items}\n"
            cart_text += f"<b>–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> {total_cost} ‚≠ê"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω–æ–π –∏ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
            cart_kb = types.InlineKeyboardMarkup(row_width=3)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–º —Ç–æ–≤–∞—Ä–æ–º
            for item in cart_items:
                product_name = get_product_name(item.product_id)
                # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞
                available_stock = get_product_stock(item.product_id)
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–º–µ–Ω—å—à–µ–Ω–∏—è, —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
                cart_kb.row(
                    types.InlineKeyboardButton(
                        f"‚ûñ", 
                        callback_data=f"remove_one_{item.product_id}"
                    ),
                    types.InlineKeyboardButton(
                        f"{product_name} ({item.quantity})",
                        callback_data=f"product_info_{item.product_id}"
                    ),
                    types.InlineKeyboardButton(
                        f"‚ûï", 
                        callback_data=f"add_one_{item.product_id}"
                    )
                )
                cart_kb.row(
                    types.InlineKeyboardButton(
                        f"‚ùå –£–¥–∞–ª–∏—Ç—å {product_name}", 
                        callback_data=f"remove_all_{item.product_id}"
                    )
                )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            cart_kb.row(types.InlineKeyboardButton("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout"))
            cart_kb.row(types.InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart"))
            cart_kb.row(types.InlineKeyboardButton("üõí –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏", callback_data="go_to_menu"))
            
            await message.answer(cart_text, parse_mode="HTML", reply_markup=cart_kb)
            
    except Exception as e:
        logger.error(f"Error displaying cart for user {user_id}: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ—Ä–∑–∏–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def clear_cart_callback(callback: types.CallbackQuery):
    """–û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    
    try:
        with get_database_session() as session:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            session.query(CartItem).filter(CartItem.user_id == user_id).delete()
            session.commit()
            
        await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç—É—é –∫–æ—Ä–∑–∏–Ω—É
        cart_kb = types.InlineKeyboardMarkup(row_width=1)
        cart_kb.add(
            types.InlineKeyboardButton("üõí –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–æ–≤–∞—Ä–∞–º", callback_data="go_to_menu")
        )
        
        await callback.message.edit_text(
            "üß∫ <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞</b>\n\n"
            "–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –Ω–∞—à–µ–º –º–µ–Ω—é!",
            parse_mode="HTML",
            reply_markup=cart_kb
        )
        
    except Exception as e:
        logger.error(f"Error clearing cart for user {user_id}: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã")

async def select_quantity_callback(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞"""
    product_id = callback.data.replace("select_quantity_", "")
    await callback.answer()
    
    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.delete()
    except Exception as e:
        logger.error(f"Error deleting message: {e}", exc_info=True)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    quantity_kb = types.InlineKeyboardMarkup(row_width=5)
    quantity_buttons = []
    
    for i in range(1, 6):  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç 1 –¥–æ 5
        quantity_buttons.append(
            types.InlineKeyboardButton(str(i), callback_data=f"add_qty_{product_id}_{i}")
        )
    
    quantity_kb.add(*quantity_buttons)
    quantity_kb.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"product_{product_id}"))
    
    await callback.message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:", reply_markup=quantity_kb)

async def add_to_cart_with_quantity_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º"""
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    parts = callback.data.replace("add_qty_", "").split("_")
    product_id = parts[0]
    quantity = int(parts[1])
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
    available_stock = get_product_stock(product_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_in_cart = 0
    try:
        with get_database_session() as session:
            cart_item = session.query(CartItem).filter(
                CartItem.user_id == user_id,
                CartItem.product_id == product_id
            ).first()
            
            if cart_item:
                current_in_cart = cart_item.quantity
    except Exception as e:
        logger.error(f"Error checking cart: {e}", exc_info=True)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ–º –ª–∏ –º—ã –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    if quantity + current_in_cart > available_stock:
        await callback.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞! –î–æ—Å—Ç—É–ø–Ω–æ: {available_stock} —à—Ç.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –∑–≤–µ–∑–¥–∞—Ö
    price = get_product_price(product_id)
    total_price = price * quantity
    
    await callback.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {quantity} —à—Ç. –≤ –∫–æ—Ä–∑–∏–Ω—É!")
    
    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        await callback.message.delete()
    except Exception as e:
        logger.error(f"Error deleting message: {e}", exc_info=True)
    
    try:
        with get_database_session() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
            cart_item = session.query(CartItem).filter(
                CartItem.user_id == user_id,
                CartItem.product_id == product_id
            ).first()
            
            if cart_item:
                # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä —É–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                cart_item.quantity += quantity
            else:
                # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
                new_item = CartItem(
                    user_id=user_id,
                    product_id=product_id,
                    quantity=quantity
                )
                session.add(new_item)
            
            session.commit()
            logger.info(f"User {user_id} added {quantity} of product {product_id} to cart")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É"
            view_cart_kb = types.InlineKeyboardMarkup()
            view_cart_kb.add(
                types.InlineKeyboardButton("üß∫ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data="view_cart")
            )
            view_cart_kb.add(
                types.InlineKeyboardButton("‚óÄÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="back_to_menu")
            )
            
            await callback.message.answer(
                f"‚úÖ –í –∫–æ—Ä–∑–∏–Ω—É –¥–æ–±–∞–≤–ª–µ–Ω–æ: –ü—Ä–æ–¥—É–∫—Ç {product_id} - {quantity} —à—Ç.\n"
                f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {total_price} ‚≠ê", 
                reply_markup=view_cart_kb
            )
            
    except Exception as e:
        logger.error(f"Error adding item to cart: {e}", exc_info=True)
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def remove_one_item_callback(callback: types.CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–π –µ–¥–∏–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
    product_id = callback.data.replace("remove_one_", "")
    user_id = callback.from_user.id
    
    try:
        with get_database_session() as session:
            # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
            cart_item = session.query(CartItem).filter(
                CartItem.user_id == user_id,
                CartItem.product_id == product_id
            ).first()
            
            if cart_item:
                if cart_item.quantity > 1:
                    # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ 1
                    cart_item.quantity -= 1
                    session.commit()
                    await callback.answer(f"–£–¥–∞–ª–µ–Ω–∞ 1 —à—Ç. —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
                else:
                    # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è 1 —Ç–æ–≤–∞—Ä, —É–¥–∞–ª—è–µ–º –µ–≥–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é
                    session.delete(cart_item)
                    session.commit()
                    await callback.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
            else:
                await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ")
                
        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ—Ä–∑–∏–Ω–æ–π –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        try:
            await callback.message.delete()
        except Exception as e:
            logger.error(f"Error deleting message: {e}", exc_info=True)
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
        await show_cart(callback.message, user_id)
        
    except Exception as e:
        logger.error(f"Error removing item from cart: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã")

async def remove_all_item_callback(callback: types.CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –µ–¥–∏–Ω–∏—Ü –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
    product_id = callback.data.replace("remove_all_", "")
    user_id = callback.from_user.id
    
    try:
        with get_database_session() as session:
            # –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
            cart_item = session.query(CartItem).filter(
                CartItem.user_id == user_id,
                CartItem.product_id == product_id
            ).first()
            
            if cart_item:
                session.delete(cart_item)
                session.commit()
                await callback.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
            else:
                await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ")
                
        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ—Ä–∑–∏–Ω–æ–π –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        try:
            await callback.message.delete()
        except Exception as e:
            logger.error(f"Error deleting message: {e}", exc_info=True)
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
        await show_cart(callback.message, user_id)
        
    except Exception as e:
        logger.error(f"Error removing all items from cart: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã")

async def add_one_item_callback(callback: types.CallbackQuery):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–π –µ–¥–∏–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    product_id = callback.data.replace("add_one_", "")
    user_id = callback.from_user.id
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞
        available_stock = get_product_stock(product_id)
        
        with get_database_session() as session:
            # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
            cart_item = session.query(CartItem).filter(
                CartItem.user_id == user_id,
                CartItem.product_id == product_id
            ).first()
            
            if cart_item:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ–º –ª–∏ –º—ã –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                if cart_item.quantity < available_stock:
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ 1
                    cart_item.quantity += 1
                    session.commit()
                    await callback.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ 1 —à—Ç. —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É")
                else:
                    await callback.answer(f"–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ! –î–æ—Å—Ç—É–ø–Ω–æ: {available_stock} —à—Ç.")
            else:
                await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ")
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ—Ä–∑–∏–Ω–æ–π –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        try:
            await callback.message.delete()
        except Exception as e:
            logger.error(f"Error deleting message: {e}", exc_info=True)
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
        await show_cart(callback.message, user_id)
        
    except Exception as e:
        logger.error(f"Error adding item to cart: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã")

def register_cart_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã"""
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –∫–æ—Ä–∑–∏–Ω—ã
    dp.register_message_handler(cart_command, lambda message: message.text == "üß∫ –ö–æ—Ä–∑–∏–Ω–∞", state="*")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    dp.register_callback_query_handler(view_cart_callback, lambda c: c.data == "view_cart")
    dp.register_callback_query_handler(clear_cart_callback, lambda c: c.data == "clear_cart")
    dp.register_callback_query_handler(select_quantity_callback, lambda c: c.data.startswith("select_quantity_"))
    dp.register_callback_query_handler(add_to_cart_with_quantity_callback, lambda c: c.data.startswith("add_qty_"))
    dp.register_callback_query_handler(remove_one_item_callback, lambda c: c.data.startswith("remove_one_"))
    dp.register_callback_query_handler(remove_all_item_callback, lambda c: c.data.startswith("remove_all_"))
    dp.register_callback_query_handler(add_one_item_callback, lambda c: c.data.startswith("add_one_"))