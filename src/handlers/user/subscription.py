from aiogram import types
from services.database import get_database_session, User
from utils.logger import setup_logger
from utils.admin_utils import is_admin
from keyboards.user_kb import user_kb
from keyboards.admin_kb import admin_reply_kb
from utils.subscription_utils import check_user_subscriptions
from utils.message_utils import show_subscription_message

# Setup logger for this module
logger = setup_logger('handlers.subscription')

async def check_subscription_command(message: types.Message):
    """Check if a user is subscribed"""
    from services.user_service import UserService
    
    with UserService() as user_service:
        user = user_service.get_user_by_id(message.from_user.id)
        if user:
            await message.answer("You are subscribed!")
        else:
            await message.answer("You are not subscribed. Please subscribe to continue.")

async def check_subscription_callback(callback: types.CallbackQuery):
    """Handle the Check Subscription button with improved error handling"""
    user_id = callback.from_user.id
    
    logger.info(f"User {user_id} initiated subscription check")
    
    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await callback.answer("–ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å...")
    except Exception as e:
        logger.error(f"Error answering callback for user {user_id}: {e}", exc_info=True)
    
    # Check if user is an exception first
    try:
        with get_database_session() as session:
            user = session.query(User).filter(User.id == user_id).first()
            
            if user and hasattr(user, 'is_exception') and user.is_exception:
                logger.info(f"User {user_id} is marked as exception, bypassing subscription checks")
                
                try:
                    # User is an exception, show special message
                    await callback.message.delete()  # Delete the subscription check message
                    
                    # Send special message for exception users
                    keyboard = user_kb
                    if is_admin(user_id):
                        keyboard = admin_reply_kb
                        
                    await callback.message.answer(
                        "‚ú® <b>–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!</b>\n\n"
                        "–í–∞–º –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.",
                        parse_mode="HTML",
                        reply_markup=keyboard
                    )
                    return
                except Exception as e:
                    logger.error(f"Error handling exception user display for {user_id}: {e}", exc_info=True)
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ–±—ã—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–æ–∫
    except Exception as e:
        logger.error(f"Error checking if user {user_id} is an exception: {e}", exc_info=True)
    
    # Regular subscription check with improved error handling
    try:
        # Import bot inside the function for better dependency management
        try:
            from bot import bot
        except ImportError as e:
            logger.critical(f"Failed to import bot module: {e}", exc_info=True)
            await callback.message.answer("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
            
        try:
            is_subscribed, not_subscribed_channels = await check_user_subscriptions(bot, user_id)
        except Exception as e:
            logger.error(f"Error checking subscription status for user {user_id}: {e}", exc_info=True)
            await callback.message.answer(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="check_subscription")
                )
            )
            return
        
        if not is_subscribed:
            # User is still not subscribed to all channels
            logger.info(f"User {user_id} is not subscribed to all required channels: {len(not_subscribed_channels)} channels remaining")
            await show_subscription_message(callback, not_subscribed_channels)
            return
        
        # User is subscribed to all channels, show welcome message
        logger.info(f"User {user_id} has subscribed to all required channels")
        
        try:
            # –ü—Ä–æ–±—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.edit_text(
                "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.",
                reply_markup=None
            )
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            logger.warning(f"Could not edit message for user {user_id}: {e}")
            await callback.message.answer(
                "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º."
            )
        
        # Send main menu message with appropriate keyboard
        keyboard = admin_reply_kb if is_admin(user_id) else user_kb
        await callback.message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞!", reply_markup=keyboard)
        
    except Exception as e:
        error_context = {
            "user_id": user_id,
            "callback_data": callback.data,
            "chat_id": callback.message.chat.id if callback.message else None
        }
        logger.error(f"Unexpected error in check_subscription_callback: {e}. Context: {error_context}", exc_info=True)
        
        try:
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
            await callback.message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="check_subscription")
                )
            )
        except Exception as inner_e:
            logger.error(f"Error sending error message to user {user_id}: {inner_e}", exc_info=True)

def register_subscription_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–ø–∏—Å–æ–∫"""
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    dp.register_message_handler(check_subscription_command, commands=["subscription", "check_subscription"])
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    dp.register_callback_query_handler(check_subscription_callback, lambda c: c.data == "check_subscription")