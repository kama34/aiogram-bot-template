from aiogram import types
from aiogram.types import LabeledPrice
import uuid

from services.product_service import get_product_stock
from config import PAYMENT_PROVIDER_TOKEN, PAYMENT_CURRENCY
from utils.logger import setup_logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
logger = setup_logger('handlers.payment.process')

async def pay_with_stars_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥–∞–º–∏ Telegram"""
    user_id = callback.from_user.id
    await callback.answer()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ
        from bot import dp, bot
        
        user_data = await dp.storage.get_data(user=user_id)
        
        if not user_data or "total_cost_stars" not in user_data:
            await callback.message.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        
        order_items = user_data.get("order_items", [])
        # –¶–µ–Ω–∞ —É–∂–µ –≤ –∑–≤–µ–∑–¥–∞—Ö, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ
        total_stars = user_data.get("total_cost_stars", 0)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤ –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π
        out_of_stock_items = []
        for item in order_items:
            available_stock = get_product_stock(item["product_id"])
            if available_stock < item["quantity"]:
                out_of_stock_items.append(f"{item['name']} (–¥–æ—Å—Ç—É–ø–Ω–æ: {available_stock} —à—Ç.)")
        
        if out_of_stock_items:
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏
            error_text = "‚ö†Ô∏è <b>–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –Ω—É–∂–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ:</b>\n\n"
            error_text += "\n".join([f"‚Ä¢ {item}" for item in out_of_stock_items])
            error_text += "\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ –æ–±–Ω–æ–≤–∏—Ç–µ –∑–∞–∫–∞–∑."
            
            await callback.message.answer(
                error_text,
                parse_mode="HTML",
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton("üß∫ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data="view_cart")
                )
            )
            return
        
        # –î–ª—è –∑–≤–µ–∑–¥ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–Ω—É –æ–±—â—É—é –ø–æ–∑–∏—Ü–∏—é
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞—Ç–µ–∂–∞
        payment_id = f"order_{user_id}_{uuid.uuid4().hex[:8]}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–ª–∞—Ç–µ–∂–∞ –∏ —Å—É–º–º—É –≤ –∑–≤–µ–∑–¥–∞—Ö
        user_data["payment_id"] = payment_id
        user_data["total_cost_stars"] = total_stars
        await dp.storage.set_data(user=user_id, data=user_data)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É –∑–≤–µ–∑–¥–∞–º–∏
        await bot.send_invoice(
            chat_id=user_id,
            title=f"–û–ø–ª–∞—Ç–∞ {total_stars} ‚≠ê",
            description=f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É –≤ —Ä–∞–∑–º–µ—Ä–µ {total_stars} –∑–≤–µ–∑–¥ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.",
            payload=payment_id,
            provider_token=PAYMENT_PROVIDER_TOKEN,
            currency=PAYMENT_CURRENCY,
            prices=[LabeledPrice(
                label=f"–û–ø–ª–∞—Ç–∞ {total_stars} ‚≠ê",
                amount=int(total_stars)
            )],
            start_parameter="stars_payment",
            need_name=False,
            need_phone_number=False,
            need_email=False,
            need_shipping_address=False,
            is_flexible=False
        )
        
    except Exception as e:
        logger.error(f"Error initiating payment for user {user_id}: {e}", exc_info=True)
        await callback.message.answer(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )