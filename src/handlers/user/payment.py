from aiogram import types, Dispatcher
from aiogram.types import LabeledPrice, PreCheckoutQuery
from datetime import datetime
from math import ceil
import uuid

from services.database import get_database_session, CartItem, Order, OrderItem
from services.product_service import get_product_price, get_product_name, get_product_stock, update_product_stock
from config import PAYMENT_PROVIDER_TOKEN, PAYMENT_CURRENCY, ADMIN_IDS
from utils.logger import setup_logger

# Setup logger for this module
logger = setup_logger('handlers.payment')

async def checkout_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    user_id = callback.from_user.id
    await callback.answer()
    
    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.delete()
    except Exception as e:
        logger.error(f"Error deleting message: {e}", exc_info=True)
    
    try:
        with get_database_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cart_items = session.query(CartItem).filter(
                CartItem.user_id == user_id
            ).all()
            
            if not cart_items:
                # –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await callback.message.answer(
                    "üß∫ –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞."
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞
            order_text = "üìù <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>\n\n"
            total_items = 0
            total_cost = 0
            order_items = []  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–∞—Ö –≤ –∑–∞–∫–∞–∑–µ
            
            for item in cart_items:
                product_name = get_product_name(item.product_id)
                price = get_product_price(item.product_id)
                item_cost = price * item.quantity
                total_items += item.quantity
                total_cost += item_cost
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –≤ –∑–∞–∫–∞–∑–µ
                order_items.append({
                    "product_id": item.product_id,
                    "quantity": item.quantity,
                    "price": price,
                    "name": product_name
                })
                
                order_text += f"‚Ä¢ {product_name} - {item.quantity} —à—Ç. √ó {price} ‚≠ê = {item_cost} ‚≠ê\n"
            
            # –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –≤ –∑–≤–µ–∑–¥–∞—Ö
            order_text += f"\n<b>–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤:</b> {total_items}\n"
            order_text += f"<b>–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> {total_cost} ‚≠ê"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from bot import dp
            await dp.storage.set_data(user=user_id, data={
                "order_items": order_items,
                "total_cost_stars": total_cost,
                "total_items": total_items
            })
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
            payment_kb = types.InlineKeyboardMarkup(row_width=1)
            payment_kb.add(
                types.InlineKeyboardButton(
                    f"‚≠ê –û–ø–ª–∞—Ç–∏—Ç—å {total_cost} –∑–≤–µ–∑–¥", 
                    callback_data="pay_with_stars"
                )
            )
            payment_kb.add(
                types.InlineKeyboardButton(
                    "‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–æ—Ä–∑–∏–Ω—É", 
                    callback_data="view_cart"
                )
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞
            await callback.message.answer(
                order_text,
                parse_mode="HTML",
                reply_markup=payment_kb
            )
            
    except Exception as e:
        logger.error(f"Error processing checkout for user {user_id}: {e}", exc_info=True)
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def pay_with_stars_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥–∞–º–∏ Telegram"""
    user_id = callback.from_user.id
    await callback.answer()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ
        from bot import dp, bot
        
        user_data = await dp.storage.get_data(user=user_id)
        
        if not user_data or "total_cost_stars" not in user_data:
            await callback.message.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        
        order_items = user_data.get("order_items", [])
        # –¶–µ–Ω–∞ —É–∂–µ –≤ –∑–≤–µ–∑–¥–∞—Ö, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ
        total_stars = user_data.get("total_cost_stars", 0)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤ –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π
        out_of_stock_items = []
        for item in order_items:
            available_stock = get_product_stock(item["product_id"])
            if available_stock < item["quantity"]:
                out_of_stock_items.append(f"{item['name']} (–¥–æ—Å—Ç—É–ø–Ω–æ: {available_stock} —à—Ç.)")
        
        if out_of_stock_items:
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏
            error_text = "‚ö†Ô∏è <b>–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –Ω—É–∂–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ:</b>\n\n"
            error_text += "\n".join([f"‚Ä¢ {item}" for item in out_of_stock_items])
            error_text += "\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ –æ–±–Ω–æ–≤–∏—Ç–µ –∑–∞–∫–∞–∑."
            
            await callback.message.answer(
                error_text,
                parse_mode="HTML",
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton("üß∫ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data="view_cart")
                )
            )
            return
        
        # –î–ª—è –∑–≤–µ–∑–¥ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–Ω—É –æ–±—â—É—é –ø–æ–∑–∏—Ü–∏—é
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞—Ç–µ–∂–∞
        payment_id = f"order_{user_id}_{uuid.uuid4().hex[:8]}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–ª–∞—Ç–µ–∂–∞ –∏ —Å—É–º–º—É –≤ –∑–≤–µ–∑–¥–∞—Ö
        user_data["payment_id"] = payment_id
        user_data["total_cost_stars"] = total_stars
        await dp.storage.set_data(user=user_id, data=user_data)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É –∑–≤–µ–∑–¥–∞–º–∏
        await bot.send_invoice(
            chat_id=user_id,
            title=f"–û–ø–ª–∞—Ç–∞ {total_stars} ‚≠ê",
            description=f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É –≤ —Ä–∞–∑–º–µ—Ä–µ {total_stars} –∑–≤–µ–∑–¥ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.",
            payload=payment_id,
            provider_token=PAYMENT_PROVIDER_TOKEN,
            currency=PAYMENT_CURRENCY,
            prices=[LabeledPrice(
                label=f"–û–ø–ª–∞—Ç–∞ {total_stars} ‚≠ê",
                amount=int(total_stars)
            )],
            start_parameter="stars_payment",
            need_name=False,
            need_phone_number=False,
            need_email=False,
            need_shipping_address=False,
            is_flexible=False
        )
        
    except Exception as e:
        logger.error(f"Error initiating payment for user {user_id}: {e}", exc_info=True)
        await callback.message.answer(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ pre-checkout –∑–∞–ø—Ä–æ—Å–∞"""
    user_id = pre_checkout_query.from_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ
        from bot import dp, bot
        user_data = await dp.storage.get_data(user=user_id)
        
        if not user_data or "payment_id" not in user_data:
            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –æ—Ç–∫–ª–æ–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂
            await bot.answer_pre_checkout_query(
                pre_checkout_query_id=pre_checkout_query.id,
                ok=False,
                error_message="–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞—Ç–µ–∂ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É –∑–∞–∫–∞–∑—É
        if pre_checkout_query.invoice_payload != user_data["payment_id"]:
            await bot.answer_pre_checkout_query(
                pre_checkout_query_id=pre_checkout_query.id,
                ok=False,
                error_message="–û—à–∏–±–∫–∞: –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞."
            )
            return
        
        # –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º pre-checkout
        await bot.answer_pre_checkout_query(
            pre_checkout_query_id=pre_checkout_query.id,
            ok=True
        )
        
    except Exception as e:
        logger.error(f"Error processing pre-checkout query for user {user_id}: {e}", exc_info=True)
        await bot.answer_pre_checkout_query(
            pre_checkout_query_id=pre_checkout_query.id,
            ok=False,
            error_message="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def process_successful_payment(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    user_id = message.from_user.id
    payment_info = message.successful_payment
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ
        from bot import dp, bot
        user_data = await dp.storage.get_data(user=user_id)
        
        if not user_data or "order_items" not in user_data:
            logger.error(f"Order data not found for user {user_id} after payment")
            await message.answer("–ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
            return
        
        order_items = user_data.get("order_items", [])
        total_stars = user_data.get("total_cost_stars", 0)
        order_id = None  # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –∑–∞–∫–∞–∑–∞
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        with get_database_session() as session:
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ
            for item in order_items:
                product_id = item["product_id"]
                quantity = item["quantity"]
                
                # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ
                update_product_stock(product_id, -quantity)  # –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –∑–∞–∫–∞–∑–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
            new_order = Order(
                user_id=user_id,
                total_amount=payment_info.total_amount / 100,  # –ø–µ—Ä–µ–≤–æ–¥–∏–º –∏–∑ —Å–æ—Ç—ã—Ö –¥–æ–ª–µ–π –∑–≤–µ–∑–¥—ã
                payment_id=payment_info.telegram_payment_charge_id,
                shipping_address=f"{message.from_user.full_name}, {payment_info.order_info.phone_number if hasattr(payment_info, 'order_info') and payment_info.order_info else '–ù–µ —É–∫–∞–∑–∞–Ω'}"
            )
            session.add(new_order)
            session.flush()  # —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID –∑–∞–∫–∞–∑–∞
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–∫–∞–∑–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–Ω–µ –±–ª–æ–∫–∞ with
            order_id = new_order.id
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑
            for item in order_items:
                order_item = OrderItem(
                    order_id=order_id,
                    product_id=item["product_id"],
                    quantity=item["quantity"],
                    price=item["price"]
                )
                session.add(order_item)
            
            # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            session.query(CartItem).filter(CartItem.user_id == user_id).delete()
            
            session.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–∫–∞–∑–µ
        success_message = (
            "üéâ <b>–í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!</b>\n\n"
            f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: <code>{order_id}</code>\n"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π ID
            f"–û–ø–ª–∞—á–µ–Ω–æ: {total_stars} ‚≠ê\n"
            f"–î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏."
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton("üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω", callback_data="go_to_menu")
        )
        
        await message.answer(success_message, parse_mode="HTML", reply_markup=keyboard)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
        admin_notification = (
            "üîî <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>\n\n"
            f"–ó–∞–∫–∞–∑ ‚Ññ: <code>{order_id}</code>\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name} (@{message.from_user.username})\n"
            f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n"
            f"–û–ø–ª–∞—á–µ–Ω–æ: {total_stars} ‚≠ê\n"
            f"–¢–æ–≤–∞—Ä–æ–≤: {len(order_items)}\n\n"
            "–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )
        
        for admin_id in ADMIN_IDS:
            try:
                await bot.send_message(
                    chat_id=admin_id,
                    text=admin_notification,
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"Failed to notify admin {admin_id} about new order: {e}")
        
    except Exception as e:
        logger.error(f"Error processing successful payment for user {user_id}: {e}", exc_info=True)
        await message.answer(
            "–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏ —Å–æ–æ–±—â–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–ª–∞—Ç–µ–∂–∞: "
            f"<code>{payment_info.telegram_payment_charge_id}</code>",
            parse_mode="HTML"
        )

def register_payment_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–ª–∞—Ç–µ–∂–µ–π"""
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    dp.register_callback_query_handler(checkout_callback, lambda c: c.data == "checkout")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥–∞–º–∏
    dp.register_callback_query_handler(pay_with_stars_callback, lambda c: c.data == "pay_with_stars")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è Telegram Payments
    dp.register_pre_checkout_query_handler(process_pre_checkout_query)
    dp.register_message_handler(process_successful_payment, content_types=types.ContentTypes.SUCCESSFUL_PAYMENT)