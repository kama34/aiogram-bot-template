from aiogram import types
from aiogram.dispatcher import Dispatcher
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from services.database import get_database_session, User, Referral
from services.user_service import UserService
from keyboards.admin_kb import admin_inlin_kb
from keyboards.user_kb import user_kb
from keyboards.admin_kb import admin_reply_kb
from utils.admin_utils import is_admin
from config import ADMIN_IDS, BOT_TOKEN
from utils.subscription_utils import check_user_subscriptions
from utils.logger import setup_logger
from utils.message_utils import show_subscription_message

import re

# Setup logger for this module
logger = setup_logger('handlers.user')

# Get bot username for referral links
async def get_bot_username():
    """Get bot username for referral links with improved error handling"""
    try:
        from bot import bot
        bot_info = await bot.get_me()
        logger.info(f"Successfully retrieved bot username: {bot_info.username}")
        return bot_info.username
    except ImportError as e:
        logger.critical(f"Failed to import bot module: {e}", exc_info=True)
        return "botusername"  # Fallback name
    except Exception as e:
        logger.error(f"Failed to get bot username: {e}", exc_info=True)
        return "botusername"  # Fallback name

async def start_command(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or "unknown"
    full_name = message.from_user.full_name or "Unknown User"
    
    # Check for referral parameter
    referrer_id = None
    args = message.get_args()
    
    if args and args.startswith("ref_"):
        try:
            referrer_id = int(args.replace("ref_", ""))
        except (ValueError, TypeError) as e:
            logger.error(f"Error parsing referrer ID: {e}", exc_info=True)
            referrer_id = None
    
    try:
        with UserService() as user_service:
            # Check if user already exists
            existing_user = user_service.get_user_by_id(user_id)
            is_new_user = not existing_user
            
            # Register new user if needed
            if is_new_user:
                try:
                    new_user = User(
                        id=user_id,
                        username=username,
                        full_name=full_name
                    )
                    user_service.session.add(new_user)
                    user_service.session.commit()
                    logger.info(f"New user registered: {user_id} ({username})")
                    
                    # Process referral for new users
                    if referrer_id and referrer_id != user_id:
                        await process_referral(user_service, user_id, referrer_id, full_name, username)
                except Exception as e:
                    logger.error(f"Error registering user: {e}", exc_info=True)
                    user_service.session.rollback()
            else:
                # Process referral even for existing users who haven't been referred before
                if referrer_id and referrer_id != user_id:
                    # Check if this user already has a referrer
                    existing_referral = user_service.get_referral_by_user_id(user_id)
                    if not existing_referral:
                        await process_referral(user_service, user_id, referrer_id, full_name, username)
            
            # Show normal welcome message with appropriate keyboard based on user type
            welcome_message = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞!" if not is_new_user else "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã."
            
            # Choose the appropriate keyboard based on whether the user is an admin
            keyboard = admin_reply_kb if is_admin(user_id) else user_kb
            
            await message.answer(welcome_message, reply_markup=keyboard)
            
    except Exception as e:
        logger.error(f"Error in start_command: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def process_referral(user_service, user_id, referrer_id, full_name, username):
    """Process a referral and send notifications"""
    try:
        referrer = user_service.get_user_by_id(referrer_id)
        if not referrer:
            logger.warning(f"Referrer {referrer_id} not found when processing referral for user {user_id}")
            return
            
        # Create referral record with explicit commit
        try:
            new_referral = Referral(
                user_id=user_id,
                referred_by=referrer_id
            )
            user_service.session.add(new_referral)
            user_service.session.commit()
            logger.info(f"Referral created: user {user_id} referred by {referrer_id}")
            
            # Get bot instance for messaging
            from bot import bot
            
            # Send notification to the new user (invitee)
            try:
                await bot.send_message(
                    chat_id=user_id,
                    text=f"–í—ã –±—ã–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {referrer.full_name}!"
                )
            except Exception as e:
                logger.error(f"Failed to send notification to invitee {user_id}: {e}", exc_info=True)
            
            # Send notification to the referrer
            try:
                await bot.send_message(
                    chat_id=referrer_id, 
                    text=f"–ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –ø—Ä–∏—à—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {full_name} (@{username})"
                )
            except Exception as e:
                logger.error(f"Failed to send notification to referrer {referrer_id}: {e}", exc_info=True)
            
            # Notify admin about the referral
            for admin_id in ADMIN_IDS:
                try:
                    await bot.send_message(
                        chat_id=admin_id,
                        text=f"üîî –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!\n\n"
                            f"–ü—Ä–∏–≥–ª–∞—Å–∏–ª: {referrer.full_name} (@{referrer.username}, ID: {referrer.id})\n"
                            f"–ü—Ä–∏–≥–ª–∞—à—ë–Ω: {full_name} (@{username}, ID: {user_id})"
                    )
                except Exception as e:
                    logger.error(f"Failed to notify admin {admin_id}: {e}", exc_info=True)
                    
        except Exception as e:
            logger.error(f"Error creating referral record: {e}", exc_info=True)
            user_service.session.rollback()
    except Exception as e:
        logger.error(f"Error processing referral: {e}", exc_info=True)
        
async def referral_command(message: types.Message):
    """Generate a referral link for the user"""
    user_id = message.from_user.id
    
    # For admin users, redirect to the admin panel version
    if is_admin(user_id):
        # Create a "fake" message object that matches what admin_referral_link expects
        class AdminMessage:
            def __init__(self, chat_id):
                self.chat = types.Chat(id=chat_id, type="private")
                self.answer = message.answer
        
        admin_msg = AdminMessage(user_id)
        from handlers.admin import admin_referral_link
        await admin_referral_link(admin_msg)
        return
    
    # Regular user flow continues as before...
    bot_username = await get_bot_username()
    
    # Create a referral link with the user's ID
    # Make sure there's no space or other characters that could break the parameter
    referral_link = f"https://t.me/{bot_username}?start=ref_{user_id}"
    
    # Get how many users this user has referred
    with UserService() as user_service:
        referral_count = user_service.count_user_referrals(user_id)
    
    # Create share buttons with cleaner formatting
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    
    # Direct link button
    keyboard.add(
        types.InlineKeyboardButton("üîó –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É", callback_data=f"copy_ref_{user_id}")
    )
    
    # Share button - make sure no extra spaces or characters
    keyboard.add(
        types.InlineKeyboardButton(
            "üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", 
            switch_inline_query=f"–ü—Ä–∏–≥–ª–∞—à–∞—é —Ç–µ–±—è –≤ –±–æ—Ç–∞! {referral_link}"
        )
    )
    
    await message.answer(
        f"üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n\n"
        f"<code>{referral_link}</code>\n\n"
        f"–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏! –í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏: <b>{referral_count}</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        parse_mode="HTML",
        reply_markup=keyboard
    )

async def my_referrals_command(message: types.Message):
    """Show the user's referrals"""
    user_id = message.from_user.id
    
    with UserService() as user_service:
        referrals = user_service.get_user_referrals(user_id)
        
        if not referrals:
            # Add a button to get referral link when no referrals found
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(
                types.InlineKeyboardButton("üîó –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É", callback_data=f"get_ref_link")
            )
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", reply_markup=keyboard)
            return
        
        # Count total referrals
        total_referrals = len(referrals)
        
        # Build referral list with more details
        referral_text = f"üë• <b>–í–∞—à–∏ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b> ({total_referrals}):\n\n"
        
        for i, ref in enumerate(referrals, 1):
            user = user_service.get_user_by_id(ref.user_id)
            if user:
                date_str = ref.created_at.strftime("%d.%m.%Y %H:%M") if hasattr(ref, 'created_at') else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                username_display = f"@{user.username}" if user.username else "–±–µ–∑ username"
                referral_text += f"{i}. <b>{user.full_name}</b> ({username_display})\n   üìÖ {date_str}\n"
        
        # Add statistics summary
        referral_text += f"\n<b>–í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ:</b> {total_referrals} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        
        # Create keyboard with useful actions
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            types.InlineKeyboardButton("üîó –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É", callback_data="get_ref_link")
        )
    
    await message.answer(referral_text, parse_mode="HTML", reply_markup=keyboard)

# Add handler for the get_ref_link callback
async def get_ref_link_callback(callback: types.CallbackQuery):
    """Handle the get referral link button"""
    try:
        await callback.answer()
    except Exception as e:
        logger.error(f"Error answering callback: {e}", exc_info=True)
    
    # Just call the existing referral command
    await referral_command(callback.message)

async def check_subscription_command(message: types.Message):
    with UserService() as user_service:
        user = user_service.get_user_by_id(message.from_user.id)
        if user:
            await message.answer("You are subscribed!")
        else:
            await message.answer("You are not subscribed. Please subscribe to continue.")

async def text_handler(message: types.Message):
    """Handle text messages for keyboard buttons"""
    text = message.text
    
    # Always allow help regardless of user status
    if text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        await help_command(message)
        return
    
    # For all other commands, check if user is blocked
    with get_database_session() as session:
        user = session.query(User).filter(User.id == message.from_user.id).first()
        if user and hasattr(user, 'is_blocked') and user.is_blocked:
            await message.answer("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '‚ÑπÔ∏è –ü–æ–º–æ—â—å' –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏.")
            return
    
    # Process other commands for non-blocked users
    if text == "üîç –ü—Ä–æ—Ñ–∏–ª—å":
        await profile_command(message)
    elif text == "üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞":
        await referral_command(message)
    elif text == "üë• –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã":
        await my_referrals_command(message)
    elif text == "üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞" and is_admin(message.from_user.id):
        from handlers.admin import admin_panel
        await admin_panel(message)

async def copy_ref_link_callback(callback: types.CallbackQuery):
    """Handle the copy referral link button with improved error handling"""
    user_id = None
    
    try:
        # –û—Ç–≤–µ—Ç –Ω–∞ callback –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ —Ä–∞–Ω—å—à–µ, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –æ–∂–∏–¥–∞–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await callback.answer("–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏–∂–µ")
    except Exception as e:
        logger.error(f"Error answering callback: {e}", exc_info=True)
    
    try:
        # Extract user ID from callback data with validation
        user_id_str = callback.data.replace("copy_ref_", "")
        
        # –°—Ç—Ä–æ–≥–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è input –¥–∞–Ω–Ω—ã—Ö
        if not user_id_str or not user_id_str.isdigit():
            logger.warning(f"Invalid user ID format in callback data: {callback.data}")
            await callback.message.answer(
                "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ.",
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton("üîÑ –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É", callback_data="get_ref_link")
                )
            )
            return
            
        user_id = int(user_id_str)  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ
        
        # Generate link
        bot_username = await get_bot_username()
        if not bot_username or bot_username == "botusername":
            logger.warning(f"Using fallback bot username for user {user_id}")
            
        referral_link = f"https://t.me/{bot_username}?start=ref_{user_id}"
        logger.info(f"Generated referral link for user {user_id}: {referral_link}")
        
        # Send as a separate message for easy copying
        await callback.message.answer(
            f"<code>{referral_link}</code>\n\n–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–∑—å—è–º",
            parse_mode="HTML"
        )
    except ValueError as e:
        # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤
        logger.error(f"Value error in copy_ref_link_callback: {e}", exc_info=True)
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏. –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö."
        )
    except Exception as e:
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        context = {
            "user_id": user_id,
            "callback_data": callback.data,
            "from_user": callback.from_user.id
        }
        logger.error(f"Error in copy_ref_link_callback: {e}. Context: {context}", exc_info=True)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="get_ref_link")
            )
        )

async def profile_command(message: types.Message):
    """Show user profile information with improved error handling"""
    user_id = message.from_user.id
    
    try:
        with UserService() as user_service:
            # Get user data from database
            user = user_service.get_user_by_id(user_id)
            
            if not user:
                logger.warning(f"User profile not found for ID: {user_id}")
                await message.answer("–û—à–∏–±–∫–∞: –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
                return
            
            # Get referral counts
            try:
                referral_count = user_service.count_user_referrals(user_id)
            except Exception as e:
                logger.error(f"Error getting referral count for user {user_id}: {e}", exc_info=True)
                referral_count = 0
            
            # Get referrer info if available
            referrer = None
            try:
                referral_info = user_service.get_referral_by_user_id(user_id)
                if referral_info and referral_info.referred_by:
                    referrer = user_service.get_user_by_id(referral_info.referred_by)
            except Exception as e:
                logger.error(f"Error getting referrer for user {user_id}: {e}", exc_info=True)
            
            # Format registration date safely
            try:
                registered_date = user.created_at.strftime("%d.%m.%Y %H:%M") if hasattr(user, "created_at") and user.created_at else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            except (AttributeError, ValueError) as e:
                logger.warning(f"Error formatting date for user {user_id}: {e}")
                registered_date = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            # Build profile text
            profile_text = (
                f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
                f"üÜî ID: <code>{user.id}</code>\n"
                f"üë§ –ò–º—è: {user.full_name}\n"
                f"üîñ Username: @{user.username}\n"
                f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registered_date}\n\n"
                f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{referral_count}</b>\n"
            )
            
            # Add referrer info if available
            if referrer:
                profile_text += f"üë®‚Äçüë¶ –í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª: {referrer.full_name} (@{referrer.username})\n"
            
            # Create keyboard with referral link button
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton("üîó –ú–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", callback_data="get_ref_link"))
            
            logger.info(f"Successfully generated profile for user {user_id}")
            await message.answer(profile_text, parse_mode="HTML", reply_markup=keyboard)
            
    except Exception as e:
        logger.error(f"Unexpected error in profile_command for user {user_id}: {e}", exc_info=True)
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")
            )
        )

async def help_command(message: types.Message):
    """Show help information"""
    help_text = (
        "‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/referral - –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É\n"
        "/myreferrals - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n\n"
        
        "<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:</b>\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <b>–ü—Ä–æ—Ñ–∏–ª—å</b> —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ\n"
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞</b> —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π\n"
        "‚Ä¢ –í —Ä–∞–∑–¥–µ–ª–µ <b>–ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã</b> –≤—ã —É–≤–∏–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö –≤–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
        
        "<b>–°–∏—Å—Ç–µ–º–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b>\n"
        "‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ\n"
        "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
        
        "–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
    )
    
    await message.answer(help_text, parse_mode="HTML")

def register_user_handlers(dp: Dispatcher):
    dp.register_message_handler(start_command, commands=["start"])
    dp.register_message_handler(help_command, commands=["help"])  # Add help command
    dp.register_message_handler(profile_command, commands=["profile"])  # Add profile command
    dp.register_message_handler(referral_command, commands=["referral", "ref"])
    dp.register_message_handler(my_referrals_command, commands=["myreferrals", "myref"])
    dp.register_message_handler(check_subscription_command, commands=["check_subscription"])
    dp.register_message_handler(text_handler, content_types=types.ContentTypes.TEXT)
    
    # Callback handlers
    dp.register_callback_query_handler(
        copy_ref_link_callback, 
        lambda c: c.data and c.data.startswith("copy_ref_")
    )
    dp.register_callback_query_handler(
        get_ref_link_callback,
        lambda c: c.data == "get_ref_link"
    )
    
    # Subscription check handler
    dp.register_callback_query_handler(
        check_subscription_callback,
        lambda c: c.data == "check_subscription"
    )

async def check_subscription_callback(callback: types.CallbackQuery):
    """Handle the Check Subscription button with improved error handling"""
    user_id = callback.from_user.id
    
    logger.info(f"User {user_id} initiated subscription check")
    
    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await callback.answer("–ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å...")
    except Exception as e:
        logger.error(f"Error answering callback for user {user_id}: {e}", exc_info=True)
    
    # Check if user is an exception first
    try:
        with get_database_session() as session:
            user = session.query(User).filter(User.id == user_id).first()
            
            if user and hasattr(user, 'is_exception') and user.is_exception:
                logger.info(f"User {user_id} is marked as exception, bypassing subscription checks")
                
                try:
                    # User is an exception, show special message
                    await callback.message.delete()  # Delete the subscription check message
                    
                    # Send special message for exception users
                    keyboard = user_kb
                    if is_admin(user_id):
                        keyboard = admin_reply_kb
                        
                    await callback.message.answer(
                        "‚ú® <b>–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!</b>\n\n"
                        "–í–∞–º –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.",
                        parse_mode="HTML",
                        reply_markup=keyboard
                    )
                    return
                except Exception as e:
                    logger.error(f"Error handling exception user display for {user_id}: {e}", exc_info=True)
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ–±—ã—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–æ–∫
    except Exception as e:
        logger.error(f"Error checking if user {user_id} is an exception: {e}", exc_info=True)
    
    # Regular subscription check with improved error handling
    try:
        # Import bot inside the function for better dependency management
        try:
            from bot import bot
        except ImportError as e:
            logger.critical(f"Failed to import bot module: {e}", exc_info=True)
            await callback.message.answer("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
            
        try:
            is_subscribed, not_subscribed_channels = await check_user_subscriptions(bot, user_id)
        except Exception as e:
            logger.error(f"Error checking subscription status for user {user_id}: {e}", exc_info=True)
            await callback.message.answer(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="check_subscription")
                )
            )
            return
        
        if not is_subscribed:
            # User is still not subscribed to all channels
            logger.info(f"User {user_id} is not subscribed to all required channels: {len(not_subscribed_channels)} channels remaining")
            await show_subscription_message(callback, not_subscribed_channels)
            return
        
        # User is subscribed to all channels, show welcome message
        logger.info(f"User {user_id} has subscribed to all required channels")
        
        try:
            # –ü—Ä–æ–±—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.edit_text(
                "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.",
                reply_markup=None
            )
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            logger.warning(f"Could not edit message for user {user_id}: {e}")
            await callback.message.answer(
                "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º."
            )
        
        # Send main menu message with appropriate keyboard
        keyboard = admin_reply_kb if is_admin(user_id) else user_kb
        await callback.message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞!", reply_markup=keyboard)
        
    except Exception as e:
        error_context = {
            "user_id": user_id,
            "callback_data": callback.data,
            "chat_id": callback.message.chat.id if callback.message else None
        }
        logger.error(f"Unexpected error in check_subscription_callback: {e}. Context: {error_context}", exc_info=True)
        
        try:
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
            await callback.message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="check_subscription")
                )
            )
        except Exception as inner_e:
            logger.error(f"Error sending error message to user {user_id}: {inner_e}", exc_info=True)