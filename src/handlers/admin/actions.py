from aiogram import types
from services.database import get_database_session, User
from utils.admin_utils import is_admin

async def handle_user_action(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞/–∏—Å–∫–ª—é—á–µ–Ω–∏—è)"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return
    
    try:
        await callback.answer()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback: {e}")
    
    callback_data = callback.data
    action = None
    user_id = None
    
    # –ü–∞—Ä—Å–∏–º callback_data –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
    if callback_data.startswith("block_"):
        action = "block"
        user_id = callback_data.replace("block_", "")
    elif callback_data.startswith("unblock_"):
        action = "unblock"
        user_id = callback_data.replace("unblock_", "")
    elif callback_data.startswith("add_exception_"):
        action = "add_exception"
        user_id = callback_data.replace("add_exception_", "")
    elif callback_data.startswith("remove_exception_"):
        action = "remove_exception"
        user_id = callback_data.replace("remove_exception_", "")
    
    if not action or not user_id:
        print(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π callback: {callback_data}")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    session = get_database_session()
    try:
        user = session.query(User).filter(User.id == user_id).first()
        
        if not user:
            await callback.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        if action == "block":
            if hasattr(User, 'is_blocked'):
                user.is_blocked = True
                session.commit()
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
                try:
                    from bot import bot
                    await bot.send_message(
                        chat_id=user.id,
                        text="‚õîÔ∏è –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É '‚ÑπÔ∏è –ü–æ–º–æ—â—å' –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                    )
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ: {e}")
                
                action_text = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
            else:
                action_text = "‚ö†Ô∏è –ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        
        elif action == "unblock":
            if hasattr(User, 'is_blocked'):
                user.is_blocked = False
                session.commit()
                action_text = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
            else:
                action_text = "‚ö†Ô∏è –ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        
        elif action == "add_exception":
            if hasattr(User, 'is_exception'):
                user.is_exception = True
                session.commit()
                action_text = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è"
            else:
                action_text = "‚ö†Ô∏è –ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è"
        
        elif action == "remove_exception":
            if hasattr(User, 'is_exception'):
                user.is_exception = False
                session.commit()
                action_text = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username} —É–¥–∞–ª–µ–Ω –∏–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π"
            else:
                action_text = "‚ö†Ô∏è –ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        user_info = (
            f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>\n\n"
            f"ID: <code>{user.id}</code>\n"
            f"Username: @{user.username}\n"
            f"–ü–æ–ª–Ω–æ–µ –∏–º—è: {user.full_name}\n"
        )
        
        if hasattr(User, 'is_blocked'):
            status = "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if user.is_blocked else "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
            user_info += f"–°—Ç–∞—Ç—É—Å: {status}\n"
            
        if hasattr(User, 'is_exception'):
            exception_status = "‚≠êÔ∏è –ò—Å–∫–ª—é—á–µ–Ω–∏–µ" if user.is_exception else "üë§ –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            user_info += f"–î–æ—Å—Ç—É–ø: {exception_status}\n"
            
        if hasattr(User, 'created_at'):
            user_info += f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user.created_at.strftime('%Y-%m-%d %H:%M:%S')}\n"
        
        # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        
        if hasattr(User, 'is_blocked'):
            action = "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å" if user.is_blocked else "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å"
            keyboard.add(types.InlineKeyboardButton(
                action, callback_data=f"{'unblock' if user.is_blocked else 'block'}_{user.id}"
            ))
        
        if hasattr(User, 'is_exception'):
            exception_action = "–£–±—Ä–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ" if user.is_exception else "–°–¥–µ–ª–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º"
            keyboard.add(types.InlineKeyboardButton(
                exception_action, callback_data=f"{'remove_exception' if user.is_exception else 'add_exception'}_{user.id}"
            ))
        
        keyboard.add(types.InlineKeyboardButton(
            "üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data=f"view_referrals_{user.id}"
        ))
        
        keyboard.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back"))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        await callback.message.edit_text(
            f"{user_info}\n\n{action_text}", 
            parse_mode="HTML", 
            reply_markup=keyboard
        )
        
    except Exception as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è: {str(e)}")
    finally:
        session.close()

async def back_to_user_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return
    
    try:
        await callback.answer()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback: {e}")
    
    user_id = callback.data.replace("back_to_user_", "")
    
    session = get_database_session()
    try:
        user = session.query(User).filter(User.id == user_id).first()
        
        if not user:
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back"))
            await callback.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=keyboard)
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = (
            f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>\n\n"
            f"ID: <code>{user.id}</code>\n"
            f"Username: @{user.username}\n"
            f"–ü–æ–ª–Ω–æ–µ –∏–º—è: {user.full_name}\n"
        )
        
        if hasattr(User, 'is_blocked'):
            status = "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if user.is_blocked else "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
            user_info += f"–°—Ç–∞—Ç—É—Å: {status}\n"
            
        if hasattr(User, 'is_exception'):
            exception_status = "‚≠êÔ∏è –ò—Å–∫–ª—é—á–µ–Ω–∏–µ" if user.is_exception else "üë§ –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            user_info += f"–î–æ—Å—Ç—É–ø: {exception_status}\n"
            
        if hasattr(User, 'created_at'):
            user_info += f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user.created_at.strftime('%Y-%m-%d %H:%M:%S')}\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        
        if hasattr(User, 'is_blocked'):
            action = "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å" if user.is_blocked else "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å"
            keyboard.add(types.InlineKeyboardButton(
                action, callback_data=f"{'unblock' if user.is_blocked else 'block'}_{user.id}"
            ))
        
        if hasattr(User, 'is_exception'):
            exception_action = "–£–±—Ä–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ" if user.is_exception else "–°–¥–µ–ª–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º"
            keyboard.add(types.InlineKeyboardButton(
                exception_action, callback_data=f"{'remove_exception' if user.is_exception else 'add_exception'}_{user.id}"
            ))
        
        keyboard.add(types.InlineKeyboardButton(
            "üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data=f"view_referrals_{user.id}"
        ))
        
        keyboard.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back"))
        
        await callback.message.edit_text(user_info, parse_mode="HTML", reply_markup=keyboard)
        
    except Exception as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {str(e)}")
    finally:
        session.close()

def register_action_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    dp.register_callback_query_handler(
        handle_user_action, 
        lambda c: c.data and (
            c.data.startswith("block_") or 
            c.data.startswith("unblock_") or
            c.data.startswith("add_exception_") or
            c.data.startswith("remove_exception_")
        )
    )
    dp.register_callback_query_handler(
        back_to_user_handler,
        lambda c: c.data and c.data.startswith("back_to_user_")
    )