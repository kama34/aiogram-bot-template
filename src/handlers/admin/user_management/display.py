from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from services.database import User
from utils.admin_utils import is_admin

async def show_user_info(message, user, back_callback="letter_search", delete_prev=False):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∫–æ–ª–±—ç–∫
        user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        back_callback: –°—Ç—Ä–æ–∫–∞ —Å callback_data –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        delete_prev: –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–æ–≤–æ–≥–æ
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if delete_prev and hasattr(message, 'delete'):
        try:
            await message.delete()
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info = (
        f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>\n\n"
        f"ID: <code>{user.id}</code>\n"
        f"Username: @{user.username}\n"
        f"–ü–æ–ª–Ω–æ–µ –∏–º—è: {user.full_name}\n"
    )
    
    if hasattr(User, 'is_blocked'):
        status = "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if user.is_blocked else "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
        user_info += f"–°—Ç–∞—Ç—É—Å: {status}\n"
        
    if hasattr(User, 'is_exception'):
        exception_status = "‚≠êÔ∏è –ò—Å–∫–ª—é—á–µ–Ω–∏–µ" if user.is_exception else "üë§ –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        user_info += f"–î–æ—Å—Ç—É–ø: {exception_status}\n"
        
    if hasattr(User, 'created_at'):
        user_info += f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user.created_at.strftime('%Y-%m-%d %H:%M:%S')}\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    
    if hasattr(User, 'is_blocked'):
        action = "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å" if user.is_blocked else "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å"
        keyboard.add(types.InlineKeyboardButton(
            action, callback_data=f"{'unblock' if user.is_blocked else 'block'}_{user.id}"
        ))
    
    if hasattr(User, 'is_exception'):
        exception_action = "–£–±—Ä–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ" if user.is_exception else "–°–¥–µ–ª–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º"
        keyboard.add(types.InlineKeyboardButton(
            exception_action, callback_data=f"{'remove_exception' if user.is_exception else 'add_exception'}_{user.id}"
        ))
    
    keyboard.add(types.InlineKeyboardButton(
        "üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data=f"view_referrals_{user.id}"
    ))
    
    keyboard.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=back_callback))
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≤—Ö–æ–¥–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
    if hasattr(message, 'answer'):
        # –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ–±—ä–µ–∫—Ç —Å –º–µ—Ç–æ–¥–æ–º answer
        return await message.answer(user_info, parse_mode="HTML", reply_markup=keyboard)
    elif hasattr(message, 'message') and hasattr(message.message, 'answer'):
        # –≠—Ç–æ callback_query
        return await message.message.answer(user_info, parse_mode="HTML", reply_markup=keyboard)
    else:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø, –ø–æ–ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å bot.send_message
        from bot import bot
        chat_id = message.chat.id if hasattr(message, 'chat') else message.message.chat.id
        return await bot.send_message(chat_id, user_info, parse_mode="HTML", reply_markup=keyboard)

async def view_user_handler(callback: types.CallbackQuery, state: FSMContext = None, skip_message_delete=False):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ ID"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return
    
    try:
        await callback.answer()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback: {e}")
    
    # –û—á–∏—Å—Ç–∏–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if state:
        current_state = await state.get_state()
        if current_state:
            await state.finish()
    
    user_id = callback.data.replace("view_user_", "")
    
    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ —É–¥–∞–ª–∏–ª–∏ —Ä–∞–Ω–µ–µ
    if not skip_message_delete:
        try:
            await callback.message.delete()
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    
    from services.database import get_database_session
    session = get_database_session()
    
    try:
        user = session.query(User).filter(User.id == user_id).first()
        
        if not user:
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="letter_search"))
            await callback.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=keyboard)
            return
        
        await show_user_info(callback.message, user)
        
    except Exception as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
    finally:
        session.close()

def register_display_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –¥–ª—è –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É—è state="*"
    dp.register_callback_query_handler(
        view_user_handler, 
        lambda c: c.data and c.data.startswith("view_user_"),
        state="*"
    )