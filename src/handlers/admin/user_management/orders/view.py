from aiogram import types
from utils.admin_utils import is_admin
from services.order_service import OrderService
import traceback

async def view_user_orders(callback: types.CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return
    
    try:
        await callback.answer()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {e}")
    
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–±—ç–∫–∞
    user_id = int(callback.data.replace("view_orders_", ""))
    
    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback.message.delete()
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –∑–∞–∫–∞–∑–æ–≤
    order_service = OrderService()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
        user = order_service.get_user_by_id(user_id)
        if not user:
            await callback.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            order_service.close_session()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫–∞–∑–æ–≤
        stats = order_service.get_order_stats(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
        orders = order_service.get_user_orders(user_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        if stats["total_orders"] > 0:
            message_text = (
                f"üõçÔ∏è <b>–ó–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.full_name} (@{user.username}):</b>\n\n"
                f"–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: <b>{stats['total_orders']}</b>\n"
                f"–û–±—â–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫: <b>{stats['total_spent']*100:.2f} ‚≠ê</b>\n"
            )
            
            if stats["first_date"] and stats["last_date"]:
                message_text += (
                    f"–ü–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑: {stats['first_date'].strftime('%d.%m.%Y')}\n"
                    f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑: {stats['last_date'].strftime('%d.%m.%Y')}\n\n"
                )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
            message_text += "<b>–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤:</b>\n\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            
            for order in orders:
                order_date = order.created_at.strftime("%d.%m.%Y %H:%M") if hasattr(order, "created_at") else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                status_emojis = {
                    "new": "üÜï",
                    "paid": "üí∞",
                    "processing": "‚öôÔ∏è",
                    "shipped": "üöö",
                    "delivered": "‚úÖ",
                    "cancelled": "‚ùå"
                }
                status = getattr(order, "status", "new")
                status_emoji = status_emojis.get(status, "‚ùì")
                
                message_text += f"{status_emoji} <b>–ó–∞–∫–∞–∑ #{order.id}</b> –æ—Ç {order_date} - <b>{order.total_amount*100:.2f} ‚≠ê</b>\n"
                
                # –ö–Ω–æ–ø–∫–∞ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
                keyboard.add(types.InlineKeyboardButton(
                    f"üìã –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ #{order.id} –æ—Ç {order_date}", 
                    callback_data=f"order_details_{order.id}"
                ))
        else:
            message_text = (
                f"üõçÔ∏è <b>–ó–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.full_name} (@{user.username}):</b>\n\n"
                f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤"
            )
            keyboard = types.InlineKeyboardMarkup()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard.add(types.InlineKeyboardButton(
            "‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—Ñ–∏–ª—é", 
            callback_data=f"back_to_user_{user_id}"
        ))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        await callback.message.answer(message_text, parse_mode="HTML", reply_markup=keyboard)
        
    except Exception as e:
        error_text = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤: {str(e)}\n\n"
        error_text += traceback.format_exc()
        print(error_text)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(
            "‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—Ñ–∏–ª—é", 
            callback_data=f"back_to_user_{user_id}"
        ))
        await callback.message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤: {type(e).__name__}", 
            reply_markup=keyboard
        )
    finally:
        order_service.close_session()