from aiogram import types
from utils.admin_utils import is_admin
from services.order_service import OrderService
from services.product_service import get_product_by_id
import traceback

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def get_product_name(product_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ –µ–≥–æ ID"""
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    product = get_product_by_id(product_id)
    if product:
        return product.get('name', f"–¢–æ–≤–∞—Ä #{product_id}")
    return f"–¢–æ–≤–∞—Ä #{product_id}"  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω

async def view_order_details(callback: types.CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return
    
    try:
        await callback.answer()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {e}")
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–∫–∞–∑–∞
    order_id = int(callback.data.replace("order_details_", ""))
    
    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback.message.delete()
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏
    order_service = OrderService()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        order = order_service.get_order_by_id(order_id)
        if not order:
            await callback.message.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–æ–≤–∞—Ä–æ–≤
        user = order_service.get_user_by_id(order.user_id)
        items = order_service.get_order_items(order_id)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        order_date = order.created_at.strftime("%d.%m.%Y %H:%M") if hasattr(order, "created_at") else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        user_name = f"{user.full_name} (@{user.username})" if user and user.username else f"ID: {order.user_id}"
        
        # –°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–∞
        status_display = {
            "new": "üÜï –ù–æ–≤—ã–π",
            "paid": "üí∞ –û–ø–ª–∞—á–µ–Ω",
            "processing": "‚öôÔ∏è –í –æ–±—Ä–∞–±–æ—Ç–∫–µ",
            "shipped": "üöö –û—Ç–ø—Ä–∞–≤–ª–µ–Ω",
            "delivered": "‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω",
            "cancelled": "‚ùå –û—Ç–º–µ–Ω—ë–Ω"
        }
        
        status = getattr(order, "status", "unknown")
        status_text = status_display.get(status, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å ({status})")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = (
            f"üìù <b>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ #{order.id}</b>\n\n"
            f"üìÖ –î–∞—Ç–∞: {order_date}\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}\n"
            f"üí∞ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {order.total_amount*100:.2f} ‚≠ê\n"
            f"üîñ –°—Ç–∞—Ç—É—Å: {status_text}\n"
        )
        
        if hasattr(order, "payment_id") and order.payment_id:
            message_text += f"üÜî ID –ø–ª–∞—Ç–µ–∂–∞: <code>{order.payment_id}</code>\n"
            
        if hasattr(order, "shipping_address") and order.shipping_address:
            message_text += f"üì´ –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {order.shipping_address}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–µ
        message_text += "\n<b>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–∫–∞–∑–∞:</b>\n"
        
        if items:
            for i, item in enumerate(items, 1):
                product_name = get_product_name(item.product_id)
                item_total = item.price * item.quantity
                message_text += f"{i}. <b>{product_name}</b> - {item.quantity} —à—Ç. √ó {item.price:.2f} ‚≠ê = {item_total:.2f} ‚≠ê\n"
        else:
            message_text += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö –≤ —ç—Ç–æ–º –∑–∞–∫–∞–∑–µ\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(
            "‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤",
            callback_data=f"view_orders_{order.user_id}"
        ))
        keyboard.add(types.InlineKeyboardButton(
            "üë§ –ö –ø—Ä–æ—Ñ–∏–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            callback_data=f"back_to_user_{order.user_id}"
        ))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await callback.message.answer(message_text, parse_mode="HTML", reply_markup=keyboard)
        
    except Exception as e:
        error_text = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞: {str(e)}\n\n"
        error_text += traceback.format_exc()
        print(error_text)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        keyboard = types.InlineKeyboardMarkup()
        if order and hasattr(order, "user_id"):
            user_id = order.user_id
            keyboard.add(types.InlineKeyboardButton(
                "‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤",
                callback_data=f"view_orders_{user_id}"
            ))
        else:
            keyboard.add(types.InlineKeyboardButton(
                "‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
                callback_data="admin_back"
            ))
        
        await callback.message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞: {type(e).__name__}",
            reply_markup=keyboard
        )
    finally:
        order_service.close_session()