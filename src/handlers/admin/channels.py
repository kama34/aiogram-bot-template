from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from utils.admin_utils import is_admin
from services.channel_service import ChannelService
from .core import AdminStates
from .helpers import create_error_message, return_to_channels_menu_handler

async def manage_channels_menu(message: types.Message):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏"""
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        types.InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤", callback_data="list_channels"),
        types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="add_channel"),
        types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
    )
    await message.answer("üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏:", reply_markup=keyboard)

async def list_channels(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    try:
        await callback.answer()
    except Exception as e:
        print(f"Error answering callback: {e}")
    
    await callback.message.delete()
    
    channel_service = ChannelService()
    channels = channel_service.get_all_channels()
    
    if not channels:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="add_channel"),
            types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_channels")
        )
        await callback.message.answer("üìÇ –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç.", reply_markup=keyboard)
        channel_service.close_session()
        return
    
    # Format channel list message
    text = "üìã <b>–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤:</b>\n\n"
    
    for i, channel in enumerate(channels, 1):
        status = "‚úÖ –í–∫–ª—é—á–µ–Ω" if channel.is_enabled else "‚≠ï –û—Ç–∫–ª—é—á–µ–Ω"
        text += f"{i}. <b>{channel.channel_name}</b> (<code>{channel.channel_id}</code>)\n   –°—Ç–∞—Ç—É—Å: {status}\n\n"
    
    # Add controls for each channel
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    
    for channel in channels:
        # Add channel name as a label
        keyboard.add(types.InlineKeyboardButton(
            f"{channel.channel_name}",
            callback_data=f"channel_info_{channel.id}"
        ))
    
    # Add navigation buttons
    keyboard.add(
        types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="add_channel"),
        types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_channels")
    )
    
    await callback.message.answer(text, parse_mode="HTML", reply_markup=keyboard)
    channel_service.close_session()

async def channel_info(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ"""
    try:
        await callback.answer()
    except Exception as e:
        print(f"Error answering callback: {e}")
    
    channel_id = int(callback.data.replace("channel_info_", ""))
    
    channel_service = ChannelService()
    channel = channel_service.get_channel_by_id_db(channel_id)
    
    if not channel:
        await callback.message.answer("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        channel_service.close_session()
        return
    
    # Format channel info
    status = "‚úÖ –í–∫–ª—é—á–µ–Ω" if channel.is_enabled else "‚≠ï –û—Ç–∫–ª—é—á–µ–Ω"
    added_date = channel.added_at.strftime("%d.%m.%Y %H:%M") if hasattr(channel, "added_at") else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    text = (
        f"üìå <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ:</b>\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{channel.channel_name}</b>\n"
        f"ID: <code>{channel.channel_id}</code>\n"
        f"–°—Ç–∞—Ç—É—Å: {status}\n"
        f"–î–æ–±–∞–≤–ª–µ–Ω: {added_date}\n"
    )
    
    # Create keyboard with actions
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    
    toggle_text = "–û—Ç–∫–ª—é—á–∏—Ç—å ‚ùå" if channel.is_enabled else "–í–∫–ª—é—á–∏—Ç—å ‚úÖ"
    keyboard.add(
        types.InlineKeyboardButton(toggle_text, callback_data=f"toggle_channel_{channel.id}"),
        types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data=f"delete_channel_{channel.id}"),
        types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="list_channels")
    )
    
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
    channel_service.close_session()

async def add_channel_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
    try:
        await callback.answer()
    except Exception as e:
        print(f"Error answering callback: {e}")
    
    await callback.message.delete()
    
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="cancel_channel_add"))
    
    await callback.message.answer(
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: -1001234567890) –∏–ª–∏ –∏–º—è –∫–∞–Ω–∞–ª–∞ —Å @ (–Ω–∞–ø—Ä–∏–º–µ—Ä: @channel_name).\n\n"
        "<i>‚ùó –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞.</i>",
        parse_mode="HTML", 
        reply_markup=keyboard
    )
    
    await AdminStates.waiting_for_channel_input.set()

async def add_channel_process(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–≤–æ–¥–∞"""
    channel_input = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞
    if not channel_input:
        await create_error_message(
            message,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ @username.",
            state
        )
        return
    
    # Extract channel ID or username
    channel_id = None
    channel_username = None
    
    if channel_input.startswith('@'):
        channel_username = channel_input
        # Will resolve to ID later
    elif channel_input.startswith('-100'):
        # Likely a channel ID
        try:
            channel_id = int(channel_input)
        except ValueError:
            await create_error_message(
                message,
                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∫–∞–Ω–∞–ª–∞.",
                state
            )
            return
    else:
        # Try to interpret as ID or use as username
        try:
            channel_id = int(channel_input)
        except ValueError:
            # Not a numeric ID, assume it's a username without @
            channel_username = f"@{channel_input}" if not channel_input.startswith('@') else channel_input
    
    # Get bot instance
    from bot import bot
    
    try:
        # Try to get channel info and check if bot is admin
        if channel_username:
            try:
                chat = await bot.get_chat(channel_username)
                channel_id = chat.id
                channel_name = chat.title or channel_username
            except Exception as e:
                await create_error_message(
                    message,
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª {channel_username}.\n–û—à–∏–±–∫–∞: {str(e)}",
                    state
                )
                return
        else:
            try:
                chat = await bot.get_chat(channel_id)
                channel_name = chat.title or str(channel_id)
            except Exception as e:
                await create_error_message(
                    message,
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª —Å ID {channel_id}.\n–û—à–∏–±–∫–∞: {str(e)}",
                    state
                )
                return
        
        # Check if bot is admin in the channel
        try:
            # Get bot's ID
            bot_info = await bot.get_me()
            bot_id = bot_info.id
            
            # Check if the bot is an admin
            bot_member = await bot.get_chat_member(chat.id, bot_id)
            is_admin = bot_member.status in ['administrator', 'creator']
            
            if not is_admin:
                await create_error_message(
                    message,
                    f"–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞ {channel_name}.\n" +
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∫–∞–Ω–∞–ª–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    state
                )
                return
        except Exception as e:
            await create_error_message(
                message,
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ.\n–û—à–∏–±–∫–∞: {str(e)}",
                state
            )
            return
        
        # Bot is admin, proceed to add the channel
        channel_service = ChannelService()
        
        # Check if channel already exists
        existing_channel = channel_service.get_channel_by_id(str(channel_id))
        if existing_channel:
            await create_error_message(
                message,
                f"–ö–∞–Ω–∞–ª '{channel_name}' —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫.",
                state
            )
            channel_service.close_session()
            return
        
        # Add channel to database
        try:
            new_channel = channel_service.add_channel(channel_name, str(channel_id))
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º callback_data –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            success_keyboard = types.InlineKeyboardMarkup()
            success_keyboard.add(types.InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤", callback_data="list_channels"))
            success_keyboard.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="return_to_channels_menu"))
            
            await message.answer(
                f"‚úÖ –ö–∞–Ω–∞–ª <b>{channel_name}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∏ –≤–∫–ª—é—á–µ–Ω!\n\n" +
                f"–¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.",
                parse_mode="HTML",
                reply_markup=success_keyboard
            )
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            await state.finish()
            
        except Exception as e:
            await create_error_message(
                message,
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {str(e)}",
                state
            )
            
        channel_service.close_session()
        
    except Exception as e:
        await create_error_message(
            message,
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
            state
        )

async def cancel_channel_add(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã –≤–æ –≤—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
    try:
        await callback.answer()
    except Exception as e:
        print(f"Error answering callback: {e}")
    
    # Clear any active state
    current_state = await state.get_state()
    if current_state is not None:
        await state.finish()
    
    try:
        # Delete the current message 
        await callback.message.delete()
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    
    # Show channel management menu
    await manage_channels_menu(callback.message)

async def toggle_channel(callback: types.CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–Ω–∞–ª–∞ (–≤–∫–ª—é—á–µ–Ω/–≤—ã–∫–ª—é—á–µ–Ω)"""
    try:
        await callback.answer()
    except Exception as e:
        print(f"Error answering callback: {e}")
    
    channel_db_id = int(callback.data.replace("toggle_channel_", ""))
    
    channel_service = ChannelService()
    channel = channel_service.get_channel_by_id_db(channel_db_id)
    
    if not channel:
        await callback.message.answer("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        channel_service.close_session()
        return
    
    # Toggle channel status
    try:
        channel = channel_service.toggle_channel_by_id(channel_db_id)
        status = "–≤–∫–ª—é—á–µ–Ω ‚úÖ" if channel.is_enabled else "–æ—Ç–∫–ª—é—á–µ–Ω ‚≠ï"
        
        await callback.answer(f"–ö–∞–Ω–∞–ª {status}", show_alert=True)
        
        # Return to list view with updated data
        await list_channels(callback)
    except Exception as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–Ω–∞–ª–∞: {str(e)}")
    
    channel_service.close_session()

async def delete_channel_confirm(callback: types.CallbackQuery):
    """–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –∫–∞–Ω–∞–ª–∞"""
    try:
        await callback.answer()
    except Exception as e:
        print(f"Error answering callback: {e}")
    
    channel_db_id = callback.data.replace("delete_channel_", "")
    
    # Get channel info for confirmation
    channel_service = ChannelService()
    channel = channel_service.get_channel_by_id_db(int(channel_db_id))
    
    if not channel:
        await callback.message.answer("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        channel_service.close_session()
        return
    
    # Create confirmation keyboard
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton("‚ùå –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_channel_{channel_db_id}"),
        types.InlineKeyboardButton("‚úÖ –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="list_channels")
    )
    
    await callback.message.edit_text(
        f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª <b>{channel.channel_name}</b>?",
        parse_mode="HTML",
        reply_markup=keyboard
    )
    
    channel_service.close_session()

async def delete_channel_process(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    try:
        await callback.answer()
    except Exception as e:
        print(f"Error answering callback: {e}")
    
    channel_db_id = int(callback.data.replace("confirm_delete_channel_", ""))
    
    channel_service = ChannelService()
    
    try:
        channel = channel_service.get_channel_by_id_db(channel_db_id)
        if not channel:
            await callback.message.answer("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            channel_service.close_session()
            return
        
        channel_name = channel.channel_name
        success = channel_service.delete_channel_by_id(channel_db_id)
        
        if success:
            await callback.answer(f"–ö–∞–Ω–∞–ª {channel_name} —É–¥–∞–ª–µ–Ω.", show_alert=True)
        else:
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª.", show_alert=True)
        
        # Return to the updated channel list
        await list_channels(callback)
    except Exception as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {str(e)}")
    finally:
        channel_service.close_session()

async def manage_channels_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏"""
    try:
        await callback.answer()
    except Exception as e:
        print(f"Error answering callback: {e}")
    
    try:
        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.delete()
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏
    await manage_channels_menu(callback.message)

def register_channel_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏"""
    dp.register_callback_query_handler(list_channels, lambda c: c.data == "list_channels")
    dp.register_callback_query_handler(channel_info, lambda c: c.data and c.data.startswith("channel_info_"))
    dp.register_callback_query_handler(add_channel_start, lambda c: c.data == "add_channel")
    dp.register_callback_query_handler(manage_channels_callback, lambda c: c.data == "manage_channels")
    dp.register_message_handler(add_channel_process, state=AdminStates.waiting_for_channel_input)
    dp.register_callback_query_handler(toggle_channel, lambda c: c.data and c.data.startswith("toggle_channel_"))
    dp.register_callback_query_handler(delete_channel_confirm, lambda c: c.data and c.data.startswith("delete_channel_"))
    dp.register_callback_query_handler(delete_channel_process, lambda c: c.data and c.data.startswith("confirm_delete_channel_"))
    dp.register_callback_query_handler(cancel_channel_add, lambda c: c.data == "cancel_channel_add", state="*")
    dp.register_callback_query_handler(return_to_channels_menu_handler, lambda c: c.data == "return_to_channels_menu")