from aiogram import types
from aiogram.dispatcher import FSMContext
from utils.admin_utils import is_admin
from services.channel_service import ChannelService
from ..states import AdminStates
from ..helpers import create_error_message
from .menu import manage_channels_menu

async def add_channel_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return
        
    try:
        await callback.answer()
    except Exception as e:
        print(f"Error answering callback: {e}")
    
    await callback.message.delete()
    
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="cancel_channel_add"))
    
    await callback.message.answer(
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: -1001234567890) –∏–ª–∏ –∏–º—è –∫–∞–Ω–∞–ª–∞ —Å @ (–Ω–∞–ø—Ä–∏–º–µ—Ä: @channel_name).\n\n"
        "<i>‚ùó –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞.</i>",
        parse_mode="HTML", 
        reply_markup=keyboard
    )
    
    await AdminStates.waiting_for_channel_input.set()

async def add_channel_process(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–≤–æ–¥–∞"""
    channel_input = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞
    if not channel_input:
        await create_error_message(
            message,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ @username.",
            state
        )
        return
    
    # Extract channel ID or username
    channel_id = None
    channel_username = None
    
    if channel_input.startswith('@'):
        channel_username = channel_input
        # Will resolve to ID later
    elif channel_input.startswith('-100'):
        # Likely a channel ID
        try:
            channel_id = int(channel_input)
        except ValueError:
            await create_error_message(
                message,
                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∫–∞–Ω–∞–ª–∞.",
                state
            )
            return
    else:
        # Try to interpret as ID or use as username
        try:
            channel_id = int(channel_input)
        except ValueError:
            # Not a numeric ID, assume it's a username without @
            channel_username = f"@{channel_input}" if not channel_input.startswith('@') else channel_input
    
    # Get bot instance
    from bot import bot
    
    try:
        # Try to get channel info and check if bot is admin
        if channel_username:
            try:
                chat = await bot.get_chat(channel_username)
                channel_id = chat.id
                channel_name = chat.title or channel_username
            except Exception as e:
                await create_error_message(
                    message,
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª {channel_username}.\n–û—à–∏–±–∫–∞: {str(e)}",
                    state
                )
                return
        else:
            try:
                chat = await bot.get_chat(channel_id)
                channel_name = chat.title or str(channel_id)
            except Exception as e:
                await create_error_message(
                    message,
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª —Å ID {channel_id}.\n–û—à–∏–±–∫–∞: {str(e)}",
                    state
                )
                return
        
        # Check if bot is admin in the channel
        try:
            # Get bot's ID
            bot_info = await bot.get_me()
            bot_id = bot_info.id
            
            # Check if the bot is an admin
            bot_member = await bot.get_chat_member(chat.id, bot_id)
            is_admin = bot_member.status in ['administrator', 'creator']
            
            if not is_admin:
                await create_error_message(
                    message,
                    f"–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞ {channel_name}.\n" +
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∫–∞–Ω–∞–ª–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    state
                )
                return
        except Exception as e:
            await create_error_message(
                message,
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ.\n–û—à–∏–±–∫–∞: {str(e)}",
                state
            )
            return
        
        # Bot is admin, proceed to add the channel
        channel_service = ChannelService()
        
        # Check if channel already exists
        existing_channel = channel_service.get_channel_by_id(str(channel_id))
        if existing_channel:
            await create_error_message(
                message,
                f"–ö–∞–Ω–∞–ª '{channel_name}' —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫.",
                state
            )
            channel_service.close_session()
            return
        
        # Add channel to database
        try:
            new_channel = channel_service.add_channel(channel_name, str(channel_id))
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º callback_data –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            success_keyboard = types.InlineKeyboardMarkup()
            success_keyboard.add(types.InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤", callback_data="list_channels"))
            success_keyboard.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="return_to_channels_menu"))
            
            await message.answer(
                f"‚úÖ –ö–∞–Ω–∞–ª <b>{channel_name}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∏ –≤–∫–ª—é—á–µ–Ω!\n\n" +
                f"–¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.",
                parse_mode="HTML",
                reply_markup=success_keyboard
            )
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            await state.finish()
            
        except Exception as e:
            await create_error_message(
                message,
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {str(e)}",
                state
            )
            
        channel_service.close_session()
        
    except Exception as e:
        await create_error_message(
            message,
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
            state
        )

async def cancel_channel_add(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã –≤–æ –≤—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
    try:
        await callback.answer()
    except Exception as e:
        print(f"Error answering callback: {e}")
    
    # Clear any active state
    current_state = await state.get_state()
    if current_state is not None:
        await state.finish()
    
    try:
        # Delete the current message 
        await callback.message.delete()
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    
    # Show channel management menu
    await manage_channels_menu(callback.message)