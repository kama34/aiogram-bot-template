from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from utils.admin_utils import is_admin
from services.product_service import get_all_products, get_product_by_id
from utils.message_utils import safe_delete_message  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç

async def show_product_list(callback: types.CallbackQuery, state: FSMContext, page=0):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return
    
    try:
        await callback.answer()
    except Exception as e:
        print(f"Error answering callback: {e}")
    
    # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä—è–º–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ
    await safe_delete_message(callback.message)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
    products = get_all_products(include_inactive=False)
    
    if not products:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å —Ç–æ–≤–∞—Ä", callback_data="create_product"),
            types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_products")
        )
        
        await callback.message.answer(
            "üìã <b>–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n"
            "–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.", 
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        return
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    products_per_page = 5
    total_pages = (len(products) + products_per_page - 1) // products_per_page
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    page = max(0, min(page, total_pages - 1))
    
    # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = page * products_per_page
    end_idx = min(start_idx + products_per_page, len(products))
    current_products = products[start_idx:end_idx]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = f"üìã <b>–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤</b> (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages})\n\n"
    
    for i, product in enumerate(current_products, start=start_idx + 1):
        stock_info = f"({product.get('stock', 0)} —à—Ç.)" if product.get('stock') is not None else ""
        message_text += (
            f"{i}. <b>{product['name']}</b> - {product['price']} ‚ÇΩ {stock_info}\n"
            f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination_buttons = []
    
    if page > 0:
        pagination_buttons.append(
            types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"products_page_{page-1}")
        )
    
    pagination_buttons.append(
        types.InlineKeyboardButton(f"{page+1}/{total_pages}", callback_data="ignore")
    )
    
    if page < total_pages - 1:
        pagination_buttons.append(
            types.InlineKeyboardButton("‚û°Ô∏è", callback_data=f"products_page_{page+1}")
        )
    
    if pagination_buttons:
        keyboard.row(*pagination_buttons)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤
    for product in current_products:
        keyboard.add(types.InlineKeyboardButton(
            f"‚úèÔ∏è {product['name']} ({product['price']} ‚ÇΩ)",
            callback_data=f"edit_product_{product['id']}"
        ))
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard.row(
        types.InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å", callback_data="create_product"),
        types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_products")
    )
    
    await callback.message.answer(
        message_text, 
        reply_markup=keyboard,
        parse_mode="HTML"
    )

async def handle_pagination(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º —Ç–æ–≤–∞—Ä–æ–≤"""
    page = int(callback.data.replace("products_page_", ""))
    await show_product_list(callback, state, page)

def register_list_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
    dp.register_callback_query_handler(
        show_product_list, 
        lambda c: c.data == "list_products", 
        state="*"
    )
    
    dp.register_callback_query_handler(
        handle_pagination, 
        lambda c: c.data and c.data.startswith("products_page_"), 
        state="*"
    )