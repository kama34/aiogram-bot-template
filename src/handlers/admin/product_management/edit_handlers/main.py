from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from handlers.admin.states import AdminStates
from utils.admin_utils import is_admin
from utils.message_utils import safe_delete_message
from services.product_service import get_product_by_id

async def edit_product(callback: types.CallbackQuery, state: FSMContext):
    """–ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return
    
    try:
        await callback.answer()
    except Exception as e:
        print(f"Error answering callback: {e}")
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data
    product_id = callback.data.replace("edit_product_", "")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
    product = get_product_by_id(product_id)
    
    if not product:
        await callback.message.answer(
            "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.", 
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton("‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤", callback_data="list_products")
            )
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–æ–≤–∞—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(editing_product_id=product_id)
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await safe_delete_message(callback.message)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–µ
    message_text = (
        f"üìù <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
        f"üìå <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {product['name']}\n"
        f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {product['description']}\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {product['price']} ‚ÇΩ\n"
        f"üìÅ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {product.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        f"üî¢ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ:</b> {product.get('stock', 0)} —à—Ç.\n"
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏—è–º–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton("üìå –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_field_name"),
        types.InlineKeyboardButton("üìù –û–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_field_description")
    )
    keyboard.add(
        types.InlineKeyboardButton("üí∞ –¶–µ–Ω–∞", callback_data="edit_field_price"),
        types.InlineKeyboardButton("üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data="edit_field_category")
    )
    keyboard.add(
        types.InlineKeyboardButton("üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="edit_field_image"),
        types.InlineKeyboardButton("üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="edit_field_stock")
    )
    keyboard.add(
        types.InlineKeyboardButton("üö´ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data=f"delete_product_{product_id}")
    )
    keyboard.add(
        types.InlineKeyboardButton("‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤", callback_data="list_products")
    )
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
    if product.get("image_url"):
        await callback.message.answer_photo(
            photo=product["image_url"],
            caption=message_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    else:
        await callback.message.answer(
            message_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await AdminStates.product_editing.set()

def register_main_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    dp.register_callback_query_handler(
        edit_product, 
        lambda c: c.data and c.data.startswith("edit_product_"), 
        state="*"
    )