from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from handlers.admin.states import AdminStates

async def process_stock_input(message: types.Message, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ"""
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="cancel_state"))
    
    await message.answer(
        "üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):", 
        reply_markup=keyboard
    )
    
    await AdminStates.waiting_for_product_stock.set()

async def process_product_stock(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞"""
    try:
        stock = int(message.text)
        if stock < 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
        
        async with state.proxy() as data:
            data['product_stock'] = stock
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º
        product_info = (
            f"üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ</b>\n\n"
            f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {data['product_name']}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data['product_description']}\n"
            f"üí∞ –¶–µ–Ω–∞: {data['product_price']} ‚≠ê\n"
            f"üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {'–ó–∞–≥—Ä—É–∂–µ–Ω–æ' if data.get('product_image') else '–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ'}\n"
            f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('product_category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data['product_stock']} —à—Ç.\n\n"
            f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞?"
        )
        
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton("‚úÖ –°–æ–∑–¥–∞—Ç—å", callback_data="confirm_product_creation"),
            types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_state")
        )
        
        await message.answer(product_info, reply_markup=keyboard, parse_mode="HTML")
        await AdminStates.product_creation_confirmation.set()
    
    except ValueError:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="cancel_state"))
        
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):", 
            reply_markup=keyboard
        )

def register_inventory_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º —Ç–æ–≤–∞—Ä–∞"""
    dp.register_message_handler(
        process_product_stock, 
        state=AdminStates.waiting_for_product_stock
    )