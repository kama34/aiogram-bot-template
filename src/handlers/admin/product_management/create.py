from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from handlers.admin.states import AdminStates
from utils.admin_utils import is_admin
from services.product_service import create_product, update_product_stock
from utils.message_utils import safe_delete_message  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç

async def start_product_creation(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return
    
    try:
        await callback.answer()
    except Exception as e:
        print(f"Error answering callback: {e}")
    
    # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä—è–º–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ
    await safe_delete_message(callback.message)
    
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="cancel_state"))
    
    await callback.message.answer(
        "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", 
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    
    await AdminStates.waiting_for_product_name.set()

async def process_product_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    async with state.proxy() as data:
        data['product_name'] = message.text
    
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="cancel_state"))
    
    await message.answer(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", 
        reply_markup=keyboard
    )
    
    await AdminStates.waiting_for_product_description.set()

async def process_product_description(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    async with state.proxy() as data:
        data['product_description'] = message.text
    
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="cancel_state"))
    
    await message.answer(
        "üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):", 
        reply_markup=keyboard
    )
    
    await AdminStates.waiting_for_product_price.set()

async def process_product_price(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞"""
    try:
        price = float(message.text.replace(',', '.'))
        if price <= 0:
            raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è")
        
        async with state.proxy() as data:
            data['product_price'] = price
        
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_product_image"),
            types.InlineKeyboardButton("‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="cancel_state")
        )
        
        await message.answer(
            "üñº –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':", 
            reply_markup=keyboard
        )
        
        await AdminStates.waiting_for_product_image.set()
    
    except ValueError:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="cancel_state"))
        
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):", 
            reply_markup=keyboard
        )

async def process_product_image(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    if message.photo:
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ (—Å –Ω–∞–∏–ª—É—á—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º)
        photo = message.photo[-1]
        file_id = photo.file_id
        
        async with state.proxy() as data:
            data['product_image'] = file_id
        
        await process_category_input(message, state)
    else:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_product_image"),
            types.InlineKeyboardButton("‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="cancel_state")
        )
        
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':", 
            reply_markup=keyboard
        )

async def skip_product_image(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–ø—É—Å–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        await callback.answer()
    except Exception as e:
        print(f"Error answering callback: {e}")
    
    await callback.message.delete()
    
    async with state.proxy() as data:
        data['product_image'] = None
    
    await process_category_input(callback.message, state)

async def process_category_input(message: types.Message, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞"""
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_product_category"),
        types.InlineKeyboardButton("‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="cancel_state")
    )
    
    await message.answer(
        "üìÅ –í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':", 
        reply_markup=keyboard
    )
    
    await AdminStates.waiting_for_product_category.set()

async def process_product_category(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞"""
    async with state.proxy() as data:
        data['product_category'] = message.text
    
    await process_stock_input(message, state)

async def skip_product_category(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–ø—É—Å–∫–∞ –≤–≤–æ–¥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        await callback.answer()
    except Exception as e:
        print(f"Error answering callback: {e}")
    
    await callback.message.delete()
    
    async with state.proxy() as data:
        data['product_category'] = None
    
    await process_stock_input(callback.message, state)

async def process_stock_input(message: types.Message, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ"""
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="cancel_state"))
    
    await message.answer(
        "üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):", 
        reply_markup=keyboard
    )
    
    await AdminStates.waiting_for_product_stock.set()

async def process_product_stock(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞"""
    try:
        stock = int(message.text)
        if stock < 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
        
        async with state.proxy() as data:
            data['product_stock'] = stock
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º
        product_info = (
            f"üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ</b>\n\n"
            f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {data['product_name']}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data['product_description']}\n"
            f"üí∞ –¶–µ–Ω–∞: {data['product_price']} ‚≠ê\n"
            f"üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {'–ó–∞–≥—Ä—É–∂–µ–Ω–æ' if data.get('product_image') else '–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ'}\n"
            f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('product_category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data['product_stock']} —à—Ç.\n\n"
            f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞?"
        )
        
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton("‚úÖ –°–æ–∑–¥–∞—Ç—å", callback_data="confirm_product_creation"),
            types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_state")
        )
        
        await message.answer(product_info, reply_markup=keyboard, parse_mode="HTML")
        await AdminStates.product_creation_confirmation.set()
    
    except ValueError:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="cancel_state"))
        
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):", 
            reply_markup=keyboard
        )

async def confirm_product_creation(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    try:
        await callback.answer()
    except Exception as e:
        print(f"Error answering callback: {e}")
    
    await callback.message.delete()
    
    async with state.proxy() as data:
        name = data['product_name']
        description = data['product_description']
        price = data['product_price']
        image_url = data.get('product_image')
        category = data.get('product_category')
        stock = data['product_stock']
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
    processing_message = await callback.message.answer("‚è± –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
        product_id = create_product(name, description, price, image_url, category)
        
        if product_id:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
            stock_success = update_product_stock(product_id, stock)
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
            await processing_message.delete()
            
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton("‚óÄÔ∏è –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ç–æ–≤–∞—Ä–∞–º–∏", callback_data="manage_products"))
            
            if stock_success:
                success_text = f"‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\nID —Ç–æ–≤–∞—Ä–∞: <code>{product_id}</code>"
            else:
                success_text = f"‚úÖ –¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.\n\nID —Ç–æ–≤–∞—Ä–∞: <code>{product_id}</code>"
            
            await callback.message.answer(
                success_text, 
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        else:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
            await processing_message.delete()
            
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton("‚óÄÔ∏è –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ç–æ–≤–∞—Ä–∞–º–∏", callback_data="manage_products"))
            
            await callback.message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", 
                reply_markup=keyboard
            )
    except Exception as e:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
        await processing_message.delete()
        
        import traceback
        print(f"Error creating product: {e}")
        traceback.print_exc()
        
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("‚óÄÔ∏è –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ç–æ–≤–∞—Ä–∞–º–∏", callback_data="manage_products"))
        
        await callback.message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {str(e)[:100]}...", 
            reply_markup=keyboard
        )
    
    await state.finish()

def register_create_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤"""
    # –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è
    dp.register_callback_query_handler(
        start_product_creation, 
        lambda c: c.data == "create_product", 
        state="*"
    )
    
    # –í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è
    dp.register_message_handler(
        process_product_name, 
        state=AdminStates.waiting_for_product_name
    )
    
    # –í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è
    dp.register_message_handler(
        process_product_description, 
        state=AdminStates.waiting_for_product_description
    )
    
    # –í–≤–æ–¥ —Ü–µ–Ω—ã
    dp.register_message_handler(
        process_product_price, 
        state=AdminStates.waiting_for_product_price
    )
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    dp.register_message_handler(
        process_product_image, 
        content_types=types.ContentTypes.PHOTO, 
        state=AdminStates.waiting_for_product_image
    )
    
    # –ü—Ä–æ–ø—É—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    dp.register_callback_query_handler(
        skip_product_image, 
        lambda c: c.data == "skip_product_image", 
        state=AdminStates.waiting_for_product_image
    )
    
    # –í–≤–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    dp.register_message_handler(
        process_product_category, 
        state=AdminStates.waiting_for_product_category
    )
    
    # –ü—Ä–æ–ø—É—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    dp.register_callback_query_handler(
        skip_product_category, 
        lambda c: c.data == "skip_product_category", 
        state=AdminStates.waiting_for_product_category
    )
    
    # –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    dp.register_message_handler(
        process_product_stock, 
        state=AdminStates.waiting_for_product_stock
    )
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è
    dp.register_callback_query_handler(
        confirm_product_creation, 
        lambda c: c.data == "confirm_product_creation", 
        state=AdminStates.product_creation_confirmation
    )