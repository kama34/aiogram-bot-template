from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from utils.admin_utils import is_admin
from keyboards.admin_kb import admin_inlin_kb

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π –∞–¥–º–∏–Ω–∞
class AdminStates(StatesGroup):
    waiting_for_search = State()
    waiting_for_block_username = State()
    waiting_for_unblock_username = State()
    waiting_for_mass_message = State()
    browsing_letters = State()
    browsing_users_by_letter = State()
    waiting_for_channel_input = State()

async def admin_panel(message: types.Message):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    if is_admin(message.from_user.id):
        await message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=admin_inlin_kb)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

async def admin_callback_handler(callback: types.CallbackQuery, state: FSMContext):
    """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ —Ç–∞–π–º–∞—É—Ç–∞
    try:
        await callback.answer()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback: {e}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    orig_message = callback.message
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö callback_data –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    if callback.data == "user_stats":
        await orig_message.delete()
        from .statistics import view_user_statistics
        await view_user_statistics(orig_message)
    elif callback.data == "export_users":
        await orig_message.delete()
        from .statistics import export_user_list
        await export_user_list(orig_message)
    elif callback.data == "search_user":
        await orig_message.delete()
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞: –ø–æ —Ç–µ–∫—Å—Ç—É –∏–ª–∏ –ø–æ –±—É–∫–≤–µ
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏/ID", callback_data="text_search"),
            types.InlineKeyboardButton("üî§ –ü–æ–∏—Å–∫ –ø–æ –±—É–∫–≤–µ", callback_data="letter_search")
        )
        keyboard.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back"))
        await orig_message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=keyboard)
    elif callback.data == "block_user":
        await orig_message.delete()
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="cancel_state"))
        await orig_message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (username) –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:", reply_markup=keyboard)
        await AdminStates.waiting_for_block_username.set()
    elif callback.data == "unblock_user":
        await orig_message.delete()
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="cancel_state"))
        await orig_message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (username) –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:", reply_markup=keyboard)
        await AdminStates.waiting_for_unblock_username.set()
    elif callback.data == "mass_message":
        await orig_message.delete()
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="cancel_state"))
        await orig_message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=keyboard)
        await AdminStates.waiting_for_mass_message.set()
    elif callback.data == "manage_channels":
        await orig_message.delete()
        from .channels import manage_channels_menu
        await manage_channels_menu(orig_message)
    elif callback.data == "referral_stats":
        await orig_message.delete()
        from .statistics import view_referral_statistics
        await view_referral_statistics(orig_message)
    elif callback.data == "admin_ref_link":
        await orig_message.delete()
        from .statistics import admin_referral_link
        await admin_referral_link(orig_message)
    elif callback.data == "admin_my_refs":
        await orig_message.delete()
        from .statistics import admin_my_referrals
        await admin_my_referrals(orig_message)
    elif callback.data == "admin_back":
        await orig_message.delete()
        await orig_message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=admin_inlin_kb)
    elif callback.data == "cancel_state":
        current_state = await state.get_state()
        if current_state:
            await state.finish()
        await orig_message.delete()
        await orig_message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_inlin_kb)
    elif callback.data == "text_search":
        from .user_management import text_search_handler
        await text_search_handler(callback, state)
    elif callback.data == "letter_search":
        from .user_management import letter_search_handler
        await letter_search_handler(callback, state)

def register_admin_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∞–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–π"""
    dp.register_message_handler(admin_panel, commands=["admin"])
    dp.register_callback_query_handler(admin_callback_handler, lambda c: c.data.startswith(("admin_", "cancel_", "user_stats", "export_users", "search_user", "block_user", "unblock_user", "mass_message", "manage_channels", "referral_stats", "text_search", "letter_search")))