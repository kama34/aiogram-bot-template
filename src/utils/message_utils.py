from aiogram import types
from aiogram.utils.exceptions import MessageToDeleteNotFound, MessageCantBeDeleted, BotBlocked
from utils.logger import setup_logger
import functools

# Setup logger for this module
logger = setup_logger('utils.message_utils')

def safe_telegram_operation(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å Telegram API
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –∏—Ö
    """
    @functools.wraps(func)
    async def wrapper(*args, **kwargs):
        try:
            return await func(*args, **kwargs)
        except MessageToDeleteNotFound:
            print(f"Warning: Message to delete not found in {func.__name__}")
        except MessageCantBeDeleted:
            print(f"Warning: Message can't be deleted in {func.__name__}")
        except BotBlocked:
            print(f"Warning: Bot was blocked by user in {func.__name__}")
        except Exception as e:
            print(f"Error in {func.__name__}: {e}")
        return None
    
    return wrapper

async def show_subscription_message(message_or_callback, not_subscribed_channels):
    """Show subscription requirement message with channel buttons and error handling"""
    try:
        # Create message text
        text = (
            "üîÑ <b>–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã:</b>\n\n"
        )
        
        # Create keyboard with channel buttons
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
        if not isinstance(not_subscribed_channels, list):
            logger.error(f"Invalid channels data type: {type(not_subscribed_channels)}")
            not_subscribed_channels = []
            
        for i, channel in enumerate(not_subscribed_channels, 1):
            if not isinstance(channel, dict):
                logger.warning(f"Invalid channel data format at index {i-1}: {channel}")
                continue
                
            channel_name = channel.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª')
            channel_link = channel.get('link')
            
            text += f"{i}. {channel_name}\n"
            
            if channel_link:
                keyboard.add(types.InlineKeyboardButton(f"–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {channel_name}", url=channel_link))
            else:
                logger.warning(f"Missing link for channel {channel_name}")
        
        # Add check button
        keyboard.add(types.InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription"))
        
        # Get user_id for logging
        user_id = None
        if isinstance(message_or_callback, types.CallbackQuery):
            user_id = message_or_callback.from_user.id
        elif hasattr(message_or_callback, 'from_user'):
            user_id = message_or_callback.from_user.id
            
        # Send message based on the type of the incoming object
        try:
            if isinstance(message_or_callback, types.CallbackQuery):
                # It's a callback - edit the message if possible or send new one
                try:
                    await message_or_callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
                    logger.info(f"Successfully edited subscription message for user {user_id}")
                except Exception as edit_error:
                    logger.warning(f"Could not edit message, sending new one: {edit_error}")
                    await message_or_callback.message.answer(text, parse_mode="HTML", reply_markup=keyboard)
            else:
                # It's likely a message
                await message_or_callback.answer(text, parse_mode="HTML", reply_markup=keyboard)
                logger.info(f"Sent new subscription message to user {user_id}")
        except Exception as send_error:
            logger.error(f"Failed to send subscription message to user {user_id}: {send_error}", exc_info=True)
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—â–µ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
            if isinstance(message_or_callback, types.CallbackQuery):
                await message_or_callback.message.answer(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞."
                )
            else:
                await message_or_callback.answer(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞."
                )
    except Exception as e:
        # –û–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
        logger.error(f"Unexpected error in show_subscription_message: {e}", exc_info=True)

@safe_telegram_operation
async def safe_delete_message(message):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    
    Args:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    
    Returns:
        bool: True –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    if not message:
        return False
        
    try:
        await message.delete()
        return True
    except MessageToDeleteNotFound:
        # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
        return False
    except MessageCantBeDeleted:
        # –£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        return False
    except BotBlocked:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
        return False
    except Exception as e:
        # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False